// # -*- mode: c -*-
/* File: gridlink_impl.c.src */
/*
  This file is a part of the Corrfunc package
  Copyright (C) 2015-- Manodeep Sinha (manodeep@gmail.com)
  License: MIT LICENSE. See LICENSE file under the top-level
  directory at https://github.com/manodeep/Corrfunc/
*/

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <stdbool.h>

#include "defs.h"
#include "function_precision.h"
#include "utils.h"

/* Need SGLIB to simultaneously sort the particles */
#include "sglib.h"
#include "gridlink_utils_DOUBLE.h"
#include "gridlink_impl_DOUBLE.h"

#if defined(_OPENMP)
#include <omp.h>
#endif

#ifndef CONVERT_3D_INDEX_TO_LINEAR
#define CONVERT_3D_INDEX_TO_LINEAR(ix, iy, iz, nx, ny, nz)           {ix*ny*nz + iy*nz + iz}
#endif


void free_cellarray_DOUBLE(cellarray_DOUBLE *lattice, const int64_t totncells)
{
    // `totncells` is currently unused, but no need to break the C API.
    (void) totncells;
    
    // If we have not copied the particles, the lattice does not own the memory
    // and the only thing to free is the original index
    if(lattice[0].owns_memory == 0) {
        free(lattice[0].original_index);
    } else {
        // If we have copied the particles, then the first cell (lattice[0]) owns
        // the original pointers for the whole lattice, and we should free them
        free(lattice[0].x);
        free(lattice[0].y);
        free(lattice[0].z);
        for(int w = 0; w < lattice[0].weights.num_weights; w++){
            free(lattice[0].weights.weights[w]);
        }
    }

    free(lattice);
}

cellarray_DOUBLE * gridlink_DOUBLE(const int64_t NPART,
                                   DOUBLE *X, DOUBLE *Y, DOUBLE *Z, weight_struct *WEIGHTS,
                                   const DOUBLE xmin, const DOUBLE xmax,
                                   const DOUBLE ymin, const DOUBLE ymax,
                                   const DOUBLE zmin, const DOUBLE zmax,
                                   const DOUBLE max_x_size,
                                   const DOUBLE max_y_size,
                                   const DOUBLE max_z_size,
                                   const int xbin_refine_factor,
                                   const int ybin_refine_factor,
                                   const int zbin_refine_factor,
                                   int *nlattice_x,
                                   int *nlattice_y,
                                   int *nlattice_z,
                                   const struct config_options *options)
{

    int nmesh_x=0,nmesh_y=0,nmesh_z=0;

    struct timeval t0;
    if(options->verbose) {
        gettimeofday(&t0,NULL);
    }

    DOUBLE xbinsize=ZERO, ybinsize=ZERO, zbinsize=ZERO;
    const int xstatus = get_binsize_DOUBLE(xmin,xmax,max_x_size,xbin_refine_factor, options->max_cells_per_dim, &xbinsize, &nmesh_x, options);
    const int ystatus = get_binsize_DOUBLE(ymin,ymax,max_y_size,ybin_refine_factor, options->max_cells_per_dim, &ybinsize, &nmesh_y, options);
    const int zstatus = get_binsize_DOUBLE(zmin,zmax,max_z_size,zbin_refine_factor, options->max_cells_per_dim, &zbinsize, &nmesh_z, options);
    if(xstatus != EXIT_SUCCESS || ystatus != EXIT_SUCCESS || zstatus != EXIT_SUCCESS) {
      fprintf(stderr,"Received xstatus = %d ystatus = %d zstatus = %d. Error\n", xstatus, ystatus, zstatus);
      return NULL;
    }

    const int64_t totncells = (int64_t) nmesh_x * (int64_t) nmesh_y * (int64_t) nmesh_z;

    if(options->verbose) {
      fprintf(stderr,"In %s> Running with [nmesh_x, nmesh_y, nmesh_z]  = %d,%d,%d. ",__FUNCTION__,nmesh_x,nmesh_y,nmesh_z);
    }

    cellarray_DOUBLE *lattice  = (cellarray_DOUBLE *) my_malloc(sizeof(*lattice), totncells);
    DOUBLE *realX = NULL, *realY = NULL, *realZ = NULL;  // The actual allocations backing the lattice
    DOUBLE *realW[MAX_NUM_WEIGHTS] = {NULL};  // This initializes the whole array to NULL
    int w_alloc_status = 0;
    int num_weights = (WEIGHTS == NULL) ? 0 : WEIGHTS->num_weights;
    
    int64_t *cellstarts = (int64_t *) my_malloc(sizeof(*cellstarts), totncells);
    int64_t *all_cell_indices = (int64_t *) my_malloc(sizeof(*all_cell_indices), NPART);
    int64_t *original_indices =  NULL;
    if(options->copy_particles) {
        realX = (DOUBLE *) my_malloc(sizeof(*realX), NPART);
        realY = (DOUBLE *) my_malloc(sizeof(*realY), NPART);
        realZ = (DOUBLE *) my_malloc(sizeof(*realZ), NPART);
        
        for(int w = 0; w < num_weights; w++){
            realW[w] = (DOUBLE *) my_malloc(sizeof(*(realW[w])), NPART);
            w_alloc_status |= realW[w] == NULL;
        }
    } else {
        original_indices = (int64_t *) my_malloc(sizeof(*original_indices), NPART);
    }
    if(lattice == NULL || all_cell_indices == NULL ||
       (options->copy_particles == 0 && original_indices == NULL) ||
       (options->copy_particles && (realX == NULL || realY == NULL || realZ == NULL || cellstarts == NULL || w_alloc_status != 0))){

        free(lattice);free(realX);free(realY);free(realZ);free(all_cell_indices);free(original_indices);
        for(int w = 0; w < num_weights; w++){
            free(realW[w]);
        }
        fprintf(stderr,"Error: In %s> Could not allocate memory for creating the lattice and associated arrays\n", __FUNCTION__);
        return NULL;
    }

    const DOUBLE xinv=1.0/xbinsize;
    const DOUBLE yinv=1.0/ybinsize;
    const DOUBLE zinv=1.0/zbinsize;

    // First pass over the particles: compute cell indices
    int64_t out_of_bounds = 0;
#if defined(_OPENMP)
    #pragma omp parallel for schedule(static) reduction(+:out_of_bounds)
#endif
    for (int64_t i=0;i<NPART;i++)  {
        int ix=(int)((X[i]-xmin)*xinv) ;
        int iy=(int)((Y[i]-ymin)*yinv) ;
        int iz=(int)((Z[i]-zmin)*zinv) ;

        if (ix>nmesh_x-1)  ix--;    /* this shouldn't happen, but . . . */
        if (iy>nmesh_y-1)  iy--;
        if (iz>nmesh_z-1)  iz--;
    
        out_of_bounds += ix < 0 || ix >= nmesh_x || iy < 0 || iy >= nmesh_y || iz < 0 || iz >= nmesh_z;

        const int64_t icell = CONVERT_3D_INDEX_TO_LINEAR(ix, iy, iz, nmesh_x, nmesh_y, nmesh_z);
        all_cell_indices[i] = icell;
        if(options->copy_particles == 0){
            original_indices[i] = i;
        }
    }
    
    XRETURN(out_of_bounds == 0, NULL, "%"PRId64" particles are out of bounds. Check periodic wrapping?\n", out_of_bounds);
    
    // Now determine the number of particles per cell so each cell knows its global starting index
    // This information is used for both the copy and in-place versions
#if defined(_OPENMP)
    int nthreads = omp_get_max_threads();  // this is the upper bound, we will find the actual value (usually the same) below
#else
    int nthreads = 1;
#endif
    int64_t *cell_occupation[nthreads];

#if defined(_OPENMP)
    #pragma omp parallel
#endif
    {
        #if defined(_OPENMP)
        int tid = omp_get_thread_num();
        nthreads = omp_get_num_threads();  // reduce to actual number of threads, will be the same in almost all cases
        #else
        int tid = 0;
        #endif
        cell_occupation[tid] = my_calloc(sizeof(*(cell_occupation[0])), totncells);
        
        #if defined(_OPENMP)
        #pragma omp for schedule(static)
        #endif
        for(int64_t i = 0; i < NPART; i++){
            cell_occupation[tid][all_cell_indices[i]]++;
        }
    }
    
#if defined(_OPENMP)
    #pragma omp parallel for schedule(static)
#endif
    for(int64_t c = 0; c < totncells; c++){
        for(int t = 1; t < nthreads; t++){
            cell_occupation[0][c] += cell_occupation[t][c];
        }
    }

    // Fill cellstarts with the cumulative sum of the cell histogram
    parallel_cumsum(cell_occupation[0], totncells, cellstarts);

    // Initialize the lattice
#if defined(_OPENMP)
    #pragma omp parallel for schedule(static)
#endif
    for (int64_t icell=0;icell<totncells;icell++) {
        lattice[icell].nelements = 0;
        lattice[icell].owns_memory = 0;
        lattice[icell].weights.num_weights = num_weights;
        lattice[icell].xbounds[0] = MAX_POSITIVE_FLOAT;
        lattice[icell].xbounds[1] = -MAX_POSITIVE_FLOAT;
        lattice[icell].ybounds[0] = MAX_POSITIVE_FLOAT;
        lattice[icell].ybounds[1] = -MAX_POSITIVE_FLOAT;
        lattice[icell].zbounds[0] = MAX_POSITIVE_FLOAT;
        lattice[icell].zbounds[1] = -MAX_POSITIVE_FLOAT;
        lattice[icell].original_index = NULL;

        // Now initialize each cell to point to its location in the global particle arrays
        if(options->copy_particles) {
            // The first cell will "own" the memory for the whole lattice
            // This is safe because, by construction, the first cell has the original realX/Y/Z pointers
            lattice[icell].owns_memory = icell == 0;
            
            // The lattice will point into the "real" arrays
            lattice[icell].x = realX + cellstarts[icell];
            lattice[icell].y = realY + cellstarts[icell];
            lattice[icell].z = realZ + cellstarts[icell];

            // Now do the same for the weights
            for(int w = 0; w < num_weights; w++){
                lattice[icell].weights.weights[w] = realW[w] + cellstarts[icell];
            }
        } else {
            // in-place also needs the original index
            lattice[icell].original_index = original_indices + cellstarts[icell];
                
            // The lattice will point into the original arrays
            lattice[icell].x = X + cellstarts[icell];
            lattice[icell].y = Y + cellstarts[icell];
            lattice[icell].z = Z + cellstarts[icell];

            // Now do the same for the weights
            for(int w = 0; w < num_weights; w++){
                lattice[icell].weights.weights[w] = ((DOUBLE *) WEIGHTS->weights[w]) + cellstarts[icell];
            }
        }
    }//end of loop over totncells
    
    free(cellstarts);

    // Now we come to the final writes of the particles into their cells
#if defined(_OPENMP)
    #pragma omp parallel
#endif
    {
        #if defined(_OPENMP)
        int tid = omp_get_thread_num();
        #else
        int tid = 0;
        #endif
        int64_t cstart = totncells*tid/nthreads;
        int64_t cend = totncells*(tid+1)/nthreads;
        // Second loop over particles: having computed the starts of each cell, fill the cells
        // Each thread is going to loop over all particles, but only process those in its cell domain
        for (int64_t i=0;i<NPART;i++) {
            const int64_t icell = all_cell_indices[i];
            if(icell < cstart || icell >= cend){
                continue;
            }
            if(options->copy_particles) {
                const int64_t ipos = lattice[icell].nelements;
                lattice[icell].x[ipos] = X[i];
                lattice[icell].y[ipos] = Y[i];
                lattice[icell].z[ipos] = Z[i];
                for(int w = 0; w < num_weights; w++){
                    lattice[icell].weights.weights[w][ipos] = ((DOUBLE *) WEIGHTS->weights[w])[i];
                }
            }

            // Store the particle bounds
            // Needs to be done for both the copy and in-place versions
            lattice[icell].xbounds[0] = X[i] < lattice[icell].xbounds[0] ? X[i]:lattice[icell].xbounds[0];
            lattice[icell].ybounds[0] = Y[i] < lattice[icell].ybounds[0] ? Y[i]:lattice[icell].ybounds[0];
            lattice[icell].zbounds[0] = Z[i] < lattice[icell].zbounds[0] ? Z[i]:lattice[icell].zbounds[0];

            lattice[icell].xbounds[1] = X[i] > lattice[icell].xbounds[1] ? X[i]:lattice[icell].xbounds[1];
            lattice[icell].ybounds[1] = Y[i] > lattice[icell].ybounds[1] ? Y[i]:lattice[icell].ybounds[1];
            lattice[icell].zbounds[1] = Z[i] > lattice[icell].zbounds[1] ? Z[i]:lattice[icell].zbounds[1];

            lattice[icell].nelements++;
        }
    }  // end parallel region
    
    for(int64_t c = 0; c < totncells; c++){
        XRETURN(lattice[c].nelements == cell_occupation[0][c], NULL,
                "Error in %s> Expected to assign all particles = %"PRId64" into cells but only seem "
                "to have assigned %"PRId64".\n",
                __FUNCTION__, cell_occupation[0][c], lattice[c].nelements);
    }
    
    for(int t = 0; t < nthreads; t++)
        free(cell_occupation[t]);

    if(!options->copy_particles) {
        // We have been told to work with the particle positions in-place i.e., not create a copy
        // of the particle positions within the lattice. Therefore, now we have to sort the
        // input particle positions to get them to be contiguous in their respective 3D cell
        if(sizeof(*(lattice->original_index)) != sizeof(*original_indices)) {
            fprintf(stderr, "Error: In %s> The array to track the indices of input particle positions "
                    "should be the same size as the indices themselves\n", __FUNCTION__);
            fprintf(stderr,"Perhaps check that these two variables are the same type\n");
            fprintf(stderr,"'original_index' within the 'struct cellarray', defined in 'cellarray.h.src' and \n");
            fprintf(stderr,"'original_indices' defined within function '%s' in file '%s'\n", __FUNCTION__, __FILE__);
            return NULL;
        }

        // First sort all particles into their respective cell-indices
        // also simultaneously swap the other associated array
#define MULTIPLE_ARRAY_EXCHANGER(type,a,i,j) {                          \
            SGLIB_ARRAY_ELEMENTS_EXCHANGER(DOUBLE, X, i, j);            \
            SGLIB_ARRAY_ELEMENTS_EXCHANGER(DOUBLE, Y, i, j);            \
            SGLIB_ARRAY_ELEMENTS_EXCHANGER(DOUBLE, Z, i, j);            \
            SGLIB_ARRAY_ELEMENTS_EXCHANGER(int64_t, original_indices, i, j); \
            SGLIB_ARRAY_ELEMENTS_EXCHANGER(int64_t, all_cell_indices, i, j); \
            for(int w = 0; w < num_weights; w++) {             \
                SGLIB_ARRAY_ELEMENTS_EXCHANGER(DOUBLE, ((DOUBLE *) WEIGHTS->weights[w]), i, j); \
            }                                                           \
        }

        //If the input-array is sorted exactly, then the quicksort will become a very-slow O(N^2)
        //Try to protect the user.
        int64_t num_sorted = 1;
        for(int64_t ii=0;ii<NPART-1;ii++) {
            //increment by 1 if the next element is greater than or equal to current
            //decrement by 1 if the next element is smaller
            num_sorted += (all_cell_indices[ii+1] >= all_cell_indices[ii]) ? +1:-1;
        }

        //Is there any sorting required?
        if(num_sorted < NPART) {
            //Since the particles might be coming from an already sorted array - quicksort might degenerate to
            //a O(N^2) process -- heap-sort might be safer.
            if(options->use_heap_sort || num_sorted > FRACTION_SORTED_REQD_TO_HEAP_SORT * NPART) {
                SGLIB_ARRAY_HEAP_SORT(int64_t, all_cell_indices, NPART, SGLIB_NUMERIC_COMPARATOR, MULTIPLE_ARRAY_EXCHANGER);
            } else {
                SGLIB_ARRAY_QUICK_SORT(int64_t, all_cell_indices, NPART, SGLIB_NUMERIC_COMPARATOR, MULTIPLE_ARRAY_EXCHANGER);
            }
        }
        
#undef MULTIPLE_ARRAY_EXCHANGER
    }//end of options->copy_particles == 0
    
    free(all_cell_indices);  //Done with re-ordering the particles

    /* Do we need to sort the particles in Z ? */
    if(options->sort_on_z) {
#if defined(_OPENMP)
#pragma omp parallel for schedule(dynamic)
#endif
        for(int64_t icell=0;icell<totncells;icell++) {
            const cellarray_DOUBLE *first=&(lattice[icell]);
            if(first->nelements == 0) continue;

#define MULTIPLE_ARRAY_EXCHANGER(type,a,i,j) {                          \
                SGLIB_ARRAY_ELEMENTS_EXCHANGER(DOUBLE, first->x, i, j); \
                SGLIB_ARRAY_ELEMENTS_EXCHANGER(DOUBLE, first->y, i, j); \
                SGLIB_ARRAY_ELEMENTS_EXCHANGER(DOUBLE, first->z, i, j); \
                /* original_index is not used if copying the particles */ \
                if(options->copy_particles == 0) { \
                    SGLIB_ARRAY_ELEMENTS_EXCHANGER(int64_t, first->original_index, i, j); \
                } \
                for(int w = 0; w < first->weights.num_weights; w++){    \
                    SGLIB_ARRAY_ELEMENTS_EXCHANGER(DOUBLE, ((DOUBLE *)first->weights.weights[w]), i, j); \
                }                                                       \
            }

            //If the input-array is sorted exactly, then the quicksort will become a very-slow O(N^2)
            //Try to protect the user.
            int64_t num_sorted = 1;//an array containing exactly one element is always sorted
            for(int64_t ii=0;ii<first->nelements-1;ii++) {
                //increment by 1 if the next element is greater than or equal to current
                //decrement by 1 if the next element is smaller
                num_sorted += (first->z[ii+1] >= first->z[ii]) ? +1:-1;
            }

            //Check if there is any sorting to do
            //If the input array is already sorted, then all_cell_indices will also be sorted
            //which would result in num_sorted == first->nelements
            if(num_sorted < first->nelements) {
                //Since the particles might be coming from an already sorted array - quicksort might degenerate to
                //a O(N^2) process -- heap-sort might be safer.
                if(options->use_heap_sort || num_sorted > FRACTION_SORTED_REQD_TO_HEAP_SORT * first->nelements) {
                    SGLIB_ARRAY_HEAP_SORT(DOUBLE, first->z, first->nelements, SGLIB_NUMERIC_COMPARATOR , MULTIPLE_ARRAY_EXCHANGER);
                } else {
                    SGLIB_ARRAY_QUICK_SORT(DOUBLE, first->z, first->nelements, SGLIB_NUMERIC_COMPARATOR , MULTIPLE_ARRAY_EXCHANGER);
                }
            }//if sorting is required
#undef MULTIPLE_ARRAY_EXCHANGER
        }//loop over cells
    }

    *nlattice_x=nmesh_x;
    *nlattice_y=nmesh_y;
    *nlattice_z=nmesh_z;
    if(options->verbose) {
      struct timeval t1;
      gettimeofday(&t1,NULL);
      fprintf(stderr," Time taken = %7.3lf sec\n",ADD_DIFF_TIME(t0,t1));
    }

    return lattice;
}


struct cell_pair_DOUBLE * generate_cell_pairs_DOUBLE(struct cellarray_DOUBLE *lattice1,
                                                     struct cellarray_DOUBLE *lattice2,
                                                     const int64_t totncells,
                                                     int64_t *ncell_pairs,
                                                     const int xbin_refine_factor, const int ybin_refine_factor, const int zbin_refine_factor,
                                                     const int nmesh_x, const int nmesh_y, const int nmesh_z,
                                                     const DOUBLE xdiff, const DOUBLE ydiff, const DOUBLE zdiff,
                                                     const DOUBLE max_3D_sep, const DOUBLE max_2D_sep, const DOUBLE max_1D_sep,
                                                     const int enable_min_sep_opt,
                                                     const int autocorr,
                                                     const int periodic)
{
    const int64_t nx_ngb = 2*xbin_refine_factor + 1;
    const int64_t ny_ngb = 2*ybin_refine_factor + 1;
    const int64_t nz_ngb = 2*zbin_refine_factor + 1;
    const int64_t max_ngb_cells = nx_ngb * ny_ngb * nz_ngb - 1; // -1 for self


    if( ! (autocorr == 0 || autocorr == 1) ) {
        fprintf(stderr,"Error: Strange value of autocorr = %d. Expected to receive either 1 (auto-correlations) or 0 (cross-correlations)\n", autocorr);
        return NULL;
    }
    const int64_t num_self_pairs = totncells;
    const int64_t num_nonself_pairs = totncells * max_ngb_cells / (1 + autocorr);

    const int64_t max_num_cell_pairs = num_self_pairs + num_nonself_pairs;
    int64_t num_cell_pairs = 0;
    struct cell_pair_DOUBLE *all_cell_pairs = my_malloc(sizeof(*all_cell_pairs), max_num_cell_pairs);
    XRETURN(all_cell_pairs != NULL, NULL,
            "Error: Could not allocate memory for storing all the cell pairs. "
            "Reducing bin refine factors might help. Requested for %"PRId64" elements "
            "with each element of size %zu bytes\n", max_num_cell_pairs, sizeof(*all_cell_pairs));


    /* Under periodic boundary conditions + small nmesh_x/y/z, the periodic wrapping would cause
       the same cell to be included as an neighbour cell from both the left and the right side (i.e.,
       when including cells with -bin_refine_factor, and when including cells up to +bin_refine_factor)

       Previously this would throw an error, but we can simply not add the duplicate cells.

       Raised in issue# 192 (https://github.com/manodeep/Corrfunc/issues/192)

       MS: 23/8/2019
     */
    const int check_for_duplicate_ngb_cells = (periodic == 1 && (nmesh_x < (2*xbin_refine_factor + 1) ||
                                                                 nmesh_y < (2*ybin_refine_factor + 1) ||
                                                                 nmesh_z < (2*zbin_refine_factor + 1))) ? 1:0;
    for(int64_t icell=0;icell<totncells;icell++) {
        struct cellarray_DOUBLE *first = &(lattice1[icell]);
        if(first->nelements == 0) continue;
        const int iz = icell % nmesh_z;
        const int ix = icell / (nmesh_y * nmesh_z );
        const int iy = (icell - iz - ix*nmesh_z*nmesh_y)/nmesh_z;
        XRETURN(icell == (ix * nmesh_y * nmesh_z + iy * nmesh_z + (int64_t) iz), NULL,
            ANSI_COLOR_RED"BUG: Index reconstruction is wrong. icell = %"PRId64" reconstructed index = %"PRId64 ANSI_COLOR_RESET"\n",
                icell, (ix * nmesh_y * nmesh_z + iy * nmesh_z + (int64_t) iz));

        int64_t num_ngb_this_cell = 0;
        for(int iix=-xbin_refine_factor;iix<=xbin_refine_factor;iix++){
            const int periodic_ix = (ix + iix + nmesh_x) % nmesh_x;
            const int non_periodic_ix = ix + iix;
            const int iiix = (periodic == 1) ? periodic_ix:non_periodic_ix;
            if(iiix < 0 || iiix >= nmesh_x) continue;
            const DOUBLE off_xwrap = ((ix + iix) >= 0) && ((ix + iix) < nmesh_x) ? 0.0: ((ix+iix) < 0 ? xdiff:-xdiff);

            for(int iiy=-ybin_refine_factor;iiy<=ybin_refine_factor;iiy++) {
                const int periodic_iy = (iy + iiy + nmesh_y) % nmesh_y;
                const int non_periodic_iy = iy + iiy;
                const int iiiy = (periodic == 1) ? periodic_iy:non_periodic_iy;
                if(iiiy < 0 || iiiy >= nmesh_y) continue;
                const DOUBLE off_ywrap = ((iy + iiy) >= 0) && ((iy + iiy) < nmesh_y) ? 0.0: ((iy+iiy) < 0 ? ydiff:-ydiff);
                for(int64_t iiz=-zbin_refine_factor;iiz<=zbin_refine_factor;iiz++){
                    const int periodic_iz = (iz + iiz + nmesh_z) % nmesh_z;
                    const int non_periodic_iz = iz + iiz;
                    const int iiiz = (periodic == 1) ? periodic_iz:non_periodic_iz;
                    if(iiiz < 0 || iiiz >= nmesh_z) continue;

                    const DOUBLE off_zwrap = ((iz + iiz) >= 0) && ((iz + iiz) < nmesh_z) ? 0.0: ((iz+iiz) < 0 ? zdiff:-zdiff);
                    const int64_t icell2 = iiiz + (int64_t) nmesh_z*iiiy + nmesh_z*nmesh_y*iiix;

                    //Since we are creating a giant array with all possible cell-pairs, we need
                    //to account for cases where an auto-correlation is occurring within the same cell.
                    //To do so, means 'same_cell', 'min_dx/dy/dz', and 'closest_x1/y1/z1' must all be
                    //set here. Also, if the second cell has no particles, then just skip it
                    if((autocorr == 1 && icell2 > icell) || lattice2[icell2].nelements == 0) {
                        continue;
                    }

                    //Check if the ngb-cell has already been added - can happen under periodic boundary
                    //conditions, with small value of nmesh_x/y/z (ie large Rmax relative to BoxSize)
                    if(check_for_duplicate_ngb_cells) {
                        CHECK_AND_CONTINUE_FOR_DUPLICATE_NGB_CELLS_DOUBLE(icell, icell2, num_cell_pairs, num_ngb_this_cell, all_cell_pairs);
                    }

                    struct cellarray_DOUBLE *second = &(lattice2[icell2]);
                    DOUBLE closest_x1 = ZERO, closest_y1 = ZERO, closest_z1 = ZERO;
                    DOUBLE min_dx = ZERO, min_dy = ZERO, min_dz = ZERO;
                    if(enable_min_sep_opt) {
                        /* Adjust for periodic boundary conditions */
                        const DOUBLE x_low = first->xbounds[0] + off_xwrap, x_hi = first->xbounds[1] + off_xwrap;
                        const DOUBLE y_low = first->ybounds[0] + off_ywrap, y_hi = first->ybounds[1] + off_ywrap;
                        const DOUBLE z_low = first->zbounds[0] + off_zwrap, z_hi = first->zbounds[1] + off_zwrap;

                        closest_x1 = iix < 0 ? x_low:(iix > 0 ? x_hi:ZERO);
                        closest_y1 = iiy < 0 ? y_low:(iiy > 0 ? y_hi:ZERO);
                        closest_z1 = iiz < 0 ? z_low:(iiz > 0 ? z_hi:ZERO);

                        //chose lower bound if secondary cell is to the left (smaller x), else upper
                        const DOUBLE first_x  = iix < 0 ? x_low:x_hi;//second condition also contains iix==0
                        //chose upper bound if primary cell is to the right (larger x), else lower
                        const DOUBLE second_x = iix < 0 ? second->xbounds[1]:second->xbounds[0];//second condition also contains iix==0
                        min_dx = iix != 0 ? (first_x - second_x):ZERO;//ensure min_dx == 0 for iix ==0

                        //repeat for min_dy
                        const DOUBLE first_y  = iiy < 0 ? y_low:y_hi;//second condition also contains iix==0
                        const DOUBLE second_y = iiy < 0 ? second->ybounds[1]:second->ybounds[0];//second condition also contains iix==0
                        min_dy = iiy != 0  ? (first_y - second_y):ZERO;//ensure min_dy == 0 for iiy ==0

                        //repeat for min_dz
                        const DOUBLE first_z  = iiz < 0 ? z_low:z_hi;//second condition also contains iix==0
                        const DOUBLE second_z = iiz < 0 ? second->zbounds[1]:second->zbounds[0];//second condition also contains iix==0
                        min_dz = iiz != 0 ? (first_z - second_z):ZERO;//ensure min_dz == 0 for iiz ==0

                        if(max_3D_sep > 0) {
                            const DOUBLE sqr_min_sep_cells = min_dx*min_dx + min_dy*min_dy + min_dz*min_dz;
                            if(sqr_min_sep_cells >= max_3D_sep*max_3D_sep) {
                                continue;
                            }
                        }/* end of condition for max_3D_sep */


                        /* in a separate if (rather than an else with the previous if for max_3D_sep)
                           so that conditions can be chained */
                        if(max_2D_sep > 0) {
                            const DOUBLE sqr_min_sep_cells = min_dx*min_dx + min_dy*min_dy;
                            if(sqr_min_sep_cells >= max_2D_sep*max_2D_sep) {
                                continue;
                            }
                        } /* end of if condition for max_2D_sep */

                        /* in a separate if (rather than an else with the previous if for max_3D_sep)
                           so that conditions can be chained */
                        if(max_1D_sep > 0 && iiz != 0) {
                            const DOUBLE sqr_min_sep_cells = min_dz*min_dz;
                            if(sqr_min_sep_cells >= max_1D_sep*max_1D_sep) {
                                continue;
                            }
                        } /* end of if condition for max_1D_sep */
                    } /* end of if condition for enable_min_sep_opt*/


                    XRETURN(num_cell_pairs < max_num_cell_pairs, NULL,
                            "Error: Assigning this existing cell-pair would require accessing invalid memory.\n"
                            "Expected that the total number of cell pairs can be at most %"PRId64" but "
                            "currently have number of cell pairs = %"PRId64"\n", max_num_cell_pairs, num_cell_pairs);
                    //If we have reached here, then this cell *MIGHT* have a pair. We
                    //need to add a cell-pair to the array of all cell-pairs
                    struct cell_pair_DOUBLE *this_cell_pair = &all_cell_pairs[num_cell_pairs];
                    this_cell_pair->cellindex1 = icell;
                    this_cell_pair->cellindex2 = icell2;

                    this_cell_pair->xwrap = off_xwrap;
                    this_cell_pair->ywrap = off_ywrap;
                    this_cell_pair->zwrap = off_zwrap;

                    this_cell_pair->min_dx = min_dx;
                    this_cell_pair->min_dy = min_dy;
                    this_cell_pair->min_dz = min_dz;

                    this_cell_pair->closest_x1 = closest_x1;
                    this_cell_pair->closest_y1 = closest_y1;
                    this_cell_pair->closest_z1 = closest_z1;

                    this_cell_pair->same_cell = (autocorr == 1 && icell2 == icell) ? 1:0;

                    num_cell_pairs++;
                    num_ngb_this_cell++;
                } //looping over neighbours in Z
            } //looping over neighbours along Y
        }//looping over neighbours along X
    }

    *ncell_pairs = num_cell_pairs;
    return all_cell_pairs;
}
