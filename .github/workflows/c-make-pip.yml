name: C/C++ CI

on:
  pull_request:
    branches:
    - 'master'
  push:
    branches:
    - '*'

jobs:
  build:
    name: Install miniconda (${{ matrix.os }}, (${{ matrix.python-version }}, ${{ matrix.numpy-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "macos-latest"] #, "windows-latest"]
        compiler: [gcc, clang]        
        python-version: ["2.7", "3.5", "3.6", "3.7", "3.8"]
        numpy-version: ["1.14", "1.15", "1.16"]

    steps:
      - uses: goanpeca/setup-miniconda@v1
        with:
          auto-update-conda: true
          activate-environment: test
          python-version: ${{ matrix.python-version }}
          channels: conda-forge
            
#    - name: Cache pip
#      uses: actions/cache@v2
#      with:
        # This path is specific to Ubuntu
#        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
#        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
#        restore-keys: |
#          ${{ runner.os }}-pip-
#          ${{ runner.os }}-      

      - name: Install dependencies
        shell: bash -l {0}
        run: conda install -q --yes numpy=${{ matrix.numpy-version }} gsl
  #         conda create -q --yes -n test python={{ matrix.python-version }}
  #         source activate test
  #          conda install -q --yes numpy=${{ matrix.numpy-version }} 
  #              
  #         python -m pip install --upgrade pip
  #         python -m pip install --ignore-installed certifi --upgrade
  #         python -m pip install sphinx>=1.8
  #         if [[ "${INSTALL_LIBGFORTRAN}" == "TRUE" ]]; then conda install -q --yes libgfortran ; fi        

      - name: Conda info
        shell: bash -l {0}
        run: conda info
        
      - name: Conda list
        shell: pwsh
        run: conda list

      - name: Display Python version
        shell: pwsh
        run: python -c "import sys; print(sys.version)"

      - name: Display Python version
        shell: bash
        run: python -c "import sys; print(sys.version)"

      - name: Display Python version
        shell: bash -l {0}
        run: python -c "import sys; print(sys.version)"

      - name: Display PATH, compiler
        shell: bash -l {0}
        run: |
          echo $PATH
          echo which ${{ matrix.compiler }}
          echo which gsl-config
          source activate test
          echo $PATH
          echo which ${{ matrix.compiler }}
          echo which gsl-config

      - name: Show compiler version
        run: ${{ matrix.compiler }} --version

      - uses: actions/checkout@v2
      - name: compile
        run: make -r CC=${{ matrix.compiler }}

      - name: install
        run: make install CC=${{ matrix.compiler }} 

      - name: python extensions
        run: python -m pip install -e . CC=${{ matrix.compiler }} 

      - name: tests
        run: make tests CC=${{ matrix.compiler }} 
