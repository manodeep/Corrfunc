name: GitHub CI

on: [push, pull_request]

jobs:
  build:
    name: On ${{ matrix.os }} with (${{ matrix.compiler }}, python-${{ matrix.python-version }}, numpy-${{ matrix.numpy-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-16.04", "ubuntu-18.04", "ubuntu-20.04", "macos-latest"]
        compiler: [gcc-7, gcc-8, gcc-9, clang]
        python-version: ["2.7", "3.5", "3.6", "3.7", "3.8"]
        numpy-version: ["1.14", "1.16", "1.18"]
        exclude:

          # Only run with 'clang' on OSX
          - os: "macos-latest"
            compiler: gcc-7
          - os: "macos-latest"
            compiler: gcc-8
          - os: "macos-latest"
            compiler: gcc-9

          # Don't use 'clang' on linux
          - os: "ubuntu-18.04"
            compiler: clang
          - os: "ubuntu-20.04"
            compiler: clang
          - os: "ubuntu-16.04"
            compiler: clang

          # only gcc-9 on 20.04
          - os: "ubuntu-20.04"
            compiler: gcc-7
          - os: "ubuntu-20.04"
            compiler: gcc-8

          # only gcc-7 on 16.04
          - os: "ubuntu-16.04"
            compiler: gcc-8
          - os: "ubuntu-16.04"
            compiler: gcc-9

          # python3.8 only on 20.04
          - os: "ubuntu-16.04"
            python-version: "3.8"
          - os: "ubuntu-18.04"
            python-version: "3.8"
          - os: "macos-latest"
            python-version: "3.8"

          # No numpy1.16 for python3.5
          - python-version: "3.5"
            numpy-version: "1.16"

          # numpy1.18 only on python3.8 
          # (which, in turn, is only on '20.04')
          - python-version: "2.7"
            numpy-version: "1.18"
          - python-version: "3.5"
            numpy-version: "1.18"
          - python-version: "3.6"
            numpy-version: "1.18"
          - python-version: "3.7"
            numpy-version: "1.18"

    env:
      CC: ${{ matrix.compiler }}
      CORRFUNC_CI: true

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Miniconda
        uses: goanpeca/setup-miniconda@v1
        with:
          auto-update-conda: true
          auto-activate-base: false
          miniconda-version: 'latest'
          python-version: ${{ matrix.python-version }}

      - name: Install binutils on linux
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04'
        run: |
          sudo apt-get update
          sudo apt-get install binutils

      - name: Install dependencies
        shell: bash -l {0}
        run: |
          conda create -q --yes -n test python=${{ matrix.python-version }} numpy=${{ matrix.numpy-version }}
          conda activate test
          conda install -q --yes -c conda-forge gsl

      - name: Display PATH, compiler, python
        shell: bash -l {0}
        run: |
          conda activate test
          echo "PATH = " $PATH
          echo "COMPILER = " `which ${{ matrix.compiler }}`
          echo "COMPILER VERSION = " `${{ matrix.compiler }} --version`
          echo "PYTHON = " `which python`
          echo "(PYTHON, NUMPY) version = " `python -c "import sys; import numpy as np; print(sys.version); print(np.__version__);"`

#      - name: Add linker flag to OSX + gcc
#        shell: bash -l {0}
#        if: matrix.os == 'osx-latest' && startswith(matrix.compiler, 'gcc')
#        run: export CLINK = '-lgomp'

      - name: compile
        shell: bash -l {0}
        run: make -r CC=${{ matrix.compiler }}

      - name: install
        shell: bash -l {0}
        run: make install CC=${{ matrix.compiler }}

      - name: compile and install python extensions
        shell: bash -l {0}
        run: |
          echo "CC = " $CC
          export CC=${{ matrix.compiler }}
          python -m pip install -e .

      - name: tests
        shell: bash -l {0}
        run: make tests CC=${{ matrix.compiler }}

      - name: doctests
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-18.04' && matrix.python-version == '3.6' && matrix.numpy-version == '1.14'
        run: |
          python -m pip install sphinx>=1.8
          make -C docs doctest
