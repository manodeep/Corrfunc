// # -*- mode: c -*-
/* File: xi_kernels.c.src */
/*
  This file is a part of the Corrfunc package
  Copyright (C) 2015-- Manodeep Sinha (manodeep@gmail.com)
  License: MIT LICENSE. See LICENSE file under the top-level
  directory at https://github.com/manodeep/Corrfunc/
*/


#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdint.h>

#include "function_precision.h"
#include "utils.h"

#include "weight_functions_DOUBLE.h"

#ifdef __AVX512F__
#include "avx512_calls.h"

static inline int xi_avx512_intrinsics_DOUBLE(DOUBLE *x1, DOUBLE *y1, DOUBLE *z1, const weight_struct_DOUBLE *weights1, const int64_t N1,
                                              DOUBLE *x2, DOUBLE *y2, DOUBLE *z2, const weight_struct_DOUBLE *weights2, const int64_t N2,
                                              const int same_cell,
                                              const DOUBLE sqr_rmax, const DOUBLE sqr_rmin, const int nbin,
                                              const DOUBLE *rupp_sqr,
                                              const DOUBLE off_xwrap, const DOUBLE off_ywrap, const DOUBLE off_zwrap,
                                              const DOUBLE min_xdiff, const DOUBLE min_ydiff, const DOUBLE min_zdiff,
                                              const DOUBLE closest_icell_xpos, const DOUBLE closest_icell_ypos, const DOUBLE closest_icell_zpos,
                                              DOUBLE *src_rpavg,
                                              uint64_t *src_npairs,
                                              DOUBLE *src_weightavg, const weight_method_t weight_method)
{
    (void) sqr_rmin;
#ifdef COUNT_VECTORIZED
    struct timespec tcell_start;
    current_utc_time(&tcell_start);
    uint64_t serial_npairs = 0, vectorized_npairs=0;
#endif

    uint64_t npairs[nbin];
    for(int i=0;i<nbin;i++) {
        npairs[i] = 0;
    }
    AVX512_FLOATS m_rupp_sqr[nbin];
    for(int i=0;i<nbin;i++) {
        m_rupp_sqr[i] = AVX512_SET_FLOAT(rupp_sqr[i]);
    }
    const int32_t need_rpavg = src_rpavg != NULL;
    const int32_t need_weightavg = src_weightavg != NULL;

    /* variables required for rpavg and weightavg*/
    DOUBLE rpavg[nbin], weightavg[nbin];
    if(need_rpavg || need_weightavg){
        for(int i=0;i<nbin;i++) {
            rpavg[i] = ZERO;
            weightavg[i] = ZERO;
        }
    }

    // A copy whose pointers we can advance
    weight_struct_DOUBLE local_w1 = {.weights={NULL}, .num_weights=0}, local_w2 = {.weights={NULL}, .num_weights=0};
    pair_struct_DOUBLE pair = {.num_weights=0};
    avx512_weight_func_t_DOUBLE avx512_weight_func = NULL;
    if(need_weightavg){
        // Same particle list, new copy of num_weights pointers into that list
        local_w1 = *weights1;
        local_w2 = *weights2;

        pair.num_weights = local_w1.num_weights;
        avx512_weight_func   = get_avx512_weight_func_by_method_DOUBLE(weight_method);
    }

    const DOUBLE *zstart = z2, *zend = z2 + N2;
    const DOUBLE max_all_dz = SQRT(sqr_rmax - min_xdiff*min_xdiff - min_ydiff*min_ydiff);
    for(int64_t i=0;i<N1;i++) {
        const DOUBLE xpos = *x1++ + off_xwrap;
        const DOUBLE ypos = *y1++ + off_ywrap;
        const DOUBLE zpos = *z1++ + off_zwrap;
        for(int w = 0; w < pair.num_weights; w++){
            // local_w1.weights[w] is a pointer to a float in the particle list of weights,
            // just as x1 is a pointer into the list of x-positions.
            // The advancement of the local_w1.weights[w] pointer should always mirror x1.
            pair.weights0[w].a512 = AVX512_SET_FLOAT(*(local_w1.weights[w])++);
        }
        DOUBLE max_dz = max_all_dz;

        /* Now consider if this i'th particle can be a valid pair with ANY of the remaining
           j' particles. The min. difference in the z-positions between this i'th particle and ANY
           of the remaining j'th particles, is the difference between the current j'th particle and
           the current i'th particle (since all remaining j'th particles will have a larger value for
           the z-ordinate and therefore a larger difference to zpos). if this `dz` does not satisfy
           the distance criteria, then NO remaining j'th particles will. Continue on to the next i'th
           particle
        */
        const DOUBLE this_dz = *z2 - zpos;
        if(this_dz >= max_all_dz) {
            continue;
        }

        if(same_cell == 1) {
            z2++;
        } else {
            // Now add the x,y information to further limit the range of secondaries for this particle
            // But note this constraint may increase or decrease for the next particle, since x,y aren't sorted!
            const DOUBLE min_dx = min_xdiff > 0 ? min_xdiff + FABS(xpos - closest_icell_xpos):min_xdiff;
            const DOUBLE min_dy = min_ydiff > 0 ? min_ydiff + FABS(ypos - closest_icell_ypos):min_ydiff;
            const DOUBLE min_dz = min_zdiff > 0 ? (this_dz > 0 ? this_dz:min_zdiff + FABS(zpos - closest_icell_zpos)):min_zdiff;
            const DOUBLE sqr_min_sep_this_point = min_dx*min_dx + min_dy*min_dy + min_dz*min_dz;
            if(sqr_min_sep_this_point >= sqr_rmax) {
                continue;
            }
            max_dz = SQRT(sqr_rmax - min_dx*min_dx - min_dy*min_dy);

            // Now "fast forward" in the list of secondary particles to find the first one that satisfies the max_all_dz constraint
            // We don't consider the i particle's x,y information yet, because those aren't sorted
            DOUBLE target_z = zpos - max_all_dz;
            while(z2 < zend && *z2 <= target_z) {
                z2++;
            }
        } /* end of same_cell if condition*/

        // If no j particle satisfies the constraint for this i particle,
        // then the same holds true for all future i particles because they are sorted in increasing z order
        if(z2 == zend) {
            i = N1;
            break;
        }

        DOUBLE *localz2 = z2;
        const DOUBLE target_z = zpos - max_dz;
        while(localz2 != zend && *localz2 <= target_z) {
            localz2++;
        }

        const int64_t n_off = localz2 - zstart;
        DOUBLE *localx2 = x2 + n_off;
        DOUBLE *localy2 = y2 + n_off;
        for(int w = 0; w < local_w2.num_weights; w++){
            local_w2.weights[w] = weights2->weights[w] + n_off;
        }
        const AVX512_FLOATS m_xpos  = AVX512_SET_FLOAT(xpos);
        const AVX512_FLOATS m_ypos  = AVX512_SET_FLOAT(ypos);
        const AVX512_FLOATS m_zpos  = AVX512_SET_FLOAT(zpos);

        for(int64_t j=n_off;j<N2;j+=AVX512_NVEC) {
            AVX512_MASK m_mask_left = (N2 - j) >= AVX512_NVEC ? ~0:masks_per_misalignment_value_DOUBLE[N2-j];
            const AVX512_FLOATS m_x2 = AVX512_MASKZ_LOAD_FLOATS_UNALIGNED(m_mask_left, localx2);
            const AVX512_FLOATS m_y2 = AVX512_MASKZ_LOAD_FLOATS_UNALIGNED(m_mask_left, localy2);
            const AVX512_FLOATS m_z2 = AVX512_MASKZ_LOAD_FLOATS_UNALIGNED(m_mask_left, localz2);

            union int16 union_rpbin;
            union float16 union_mDperp;
            union float16_weights union_mweight;

            union_rpbin.m_ibin = AVX512_SETZERO_INT();
            union_mDperp.m_Dperp = AVX512_SETZERO_FLOAT();

#ifdef COUNT_VECTORIZED
            vectorized_npairs += (N2 - j) >= AVX512_NVEC ? AVX512_NVEC:N2-j;
#endif
            localx2 += AVX512_NVEC;//this might actually exceed the allocated range but we will never dereference that
            localy2 += AVX512_NVEC;
            localz2 += AVX512_NVEC;

            for(int w = 0; w < pair.num_weights; w++){
                pair.weights1[w].a512 = AVX512_MASKZ_LOAD_FLOATS_UNALIGNED(m_mask_left, local_w2.weights[w]);
                local_w2.weights[w] += AVX512_NVEC;
            }

            const AVX512_FLOATS m_max_dz = AVX512_SET_FLOAT(max_dz);
            const AVX512_FLOATS m_sqr_rmax = m_rupp_sqr[nbin-1];
            const AVX512_FLOATS m_sqr_rmin = m_rupp_sqr[0];

            const AVX512_FLOATS m_xdiff = AVX512_SUBTRACT_FLOATS(m_x2, m_xpos);  //(x[j] - x0)
            const AVX512_FLOATS m_ydiff = AVX512_SUBTRACT_FLOATS(m_y2, m_ypos);  //(y[j] - y0)
            const AVX512_FLOATS m_zdiff = AVX512_SUBTRACT_FLOATS(m_z2, m_zpos);  //z2[j:j+NVEC-1] - z1

            if(need_weightavg){
                pair.dx.a512 = m_xdiff;
                pair.dy.a512 = m_ydiff;
                pair.dz.a512 = m_zdiff;
            }

            const AVX512_FLOATS m_sqr_xdiff = AVX512_SQUARE_FLOAT(m_xdiff);  //(x0 - x[j])^2
            const AVX512_FLOATS x2py2  = AVX512_FMA_ADD_FLOATS(m_ydiff, m_ydiff, m_sqr_xdiff);/* dy*dy + dx^2*/
            const AVX512_FLOATS r2 = AVX512_FMA_ADD_FLOATS(m_zdiff, m_zdiff, x2py2);/* dz*dz + (dy^2 + dx^2)*/

            //the z2 arrays are sorted in increasing order. which means
            //the z2 value will increase in any future iteration of j.
            //that implies the zdiff values are also monotonically increasing
            //Therefore, if any of the zdiff values are >= max_dz, then
            //no future iteration in j can produce a zdiff value less than pimax.
            const AVX512_MASK m_mask_geq_pimax = AVX512_MASK_COMPARE_FLOATS(m_mask_left, m_zdiff,m_max_dz,_CMP_GE_OQ);
            if(m_mask_geq_pimax > 0) {
                j=N2;//but do not break yet, there might be valid pairs in this chunk
            }

            const AVX512_MASK m_rmax_mask = AVX512_MASK_COMPARE_FLOATS(m_mask_left, r2, m_sqr_rmax, _CMP_LT_OQ);
            //Create a combined mask
            //This gives us the mask for all sqr_rmin <= r2 < sqr_rmax
            m_mask_left = AVX512_MASK_COMPARE_FLOATS(m_rmax_mask, r2, m_sqr_rmin, _CMP_GE_OQ);
            if(m_mask_left == 0) {
                continue;
            }

            if(need_rpavg) {
                union_mDperp.m_Dperp = AVX512_MASKZ_SQRT_FLOAT(m_mask_left, r2);
            }
            if(need_weightavg){
                union_mweight.m_weights = avx512_weight_func(&pair);
            }

            AVX512_INTS m_rpbin = AVX512_SETZERO_INT();
            //Loop backwards through nbins. m_mask_left contains all the points that are less than rpmax
            // at the beginning of the loop.
            for(int kbin=nbin-1;kbin>=1;kbin--) {
                const AVX512_MASK m_bin_mask = AVX512_MASK_COMPARE_FLOATS(m_mask_left, r2,m_rupp_sqr[kbin-1],_CMP_GE_OQ);
                npairs[kbin] += bits_set_in_avx512_mask_DOUBLE[m_bin_mask];
                if(need_rpavg || need_weightavg) {
                    m_rpbin = AVX512_BLEND_INTS_WITH_MASK(m_bin_mask, m_rpbin, AVX512_SET_INT(kbin));
                }
                m_mask_left = AVX512_MASK_BITWISE_AND_NOT(m_bin_mask, m_mask_left);//ANDNOT(X, Y) -> NOT X AND Y
                if(m_mask_left == 0) {
                    break;
                }
            }//backwards loop over the bins

            if(need_rpavg || need_weightavg) {
                //Do I need this step of going via the union? accessing int[] -> AVX* vector might
                //cause alignment problems but accessing the ints from an AVX*
                //register should always be fine
                union_rpbin.m_ibin = m_rpbin;
                //protect the unroll pragma in case compiler is not icc.
#if  __INTEL_COMPILER
#pragma unroll(AVX512_NVEC)
#endif
                for(int jj=0;jj<AVX512_NVEC;jj++) {
                    const int kbin = union_rpbin.ibin[jj];
                    if(need_rpavg){
                        const DOUBLE r = union_mDperp.Dperp[jj];
                        rpavg[kbin] += r;
                    }
                    if(need_weightavg){
                        const DOUBLE weight = union_mweight.weights[jj];
                        weightavg[kbin] += weight;
                    }
                }
            } //OUTPUT_RPAVG
        }//end of j-loop
    }//loop over first set of particles

    uint64_t npairs_found = 0;
    for(int i=0;i<nbin;i++) {
        npairs_found += npairs[i];
        src_npairs[i] += npairs[i];
        if(need_rpavg) {
            src_rpavg[i]  += rpavg[i];
        }
        if(need_weightavg) {
            src_weightavg[i] += weightavg[i];
        }
    }

#ifdef COUNT_VECTORIZED
    struct timespec tcell_end;
    current_utc_time(&tcell_end);
    int64_t dt = (int64_t) REALTIME_ELAPSED_NS(tcell_start,tcell_end);
    fprintf(stderr,"%5"PRId64" %5"PRId64" %12"PRId64" %12"PRIu64" %12"PRIu64" %12"PRIu64" %2d\n", N1, N2, dt, vectorized_npairs, serial_npairs, npairs_found, same_cell);
#endif

    return EXIT_SUCCESS;
}
#endif //__AVX512F__



#if defined(__AVX__)
#include "avx_calls.h"

static inline int xi_avx_intrinsics_DOUBLE(DOUBLE *x1, DOUBLE *y1, DOUBLE *z1, const weight_struct_DOUBLE *weights1, const int64_t N1,
                                           DOUBLE *x2, DOUBLE *y2, DOUBLE *z2, const weight_struct_DOUBLE *weights2, const int64_t N2,
                                           const int same_cell,
                                           const DOUBLE sqr_rmax, const DOUBLE sqr_rmin, const int nbin, const DOUBLE *rupp_sqr,
                                           const DOUBLE off_xwrap, const DOUBLE off_ywrap, const DOUBLE off_zwrap,
                                           const DOUBLE min_xdiff, const DOUBLE min_ydiff, const DOUBLE min_zdiff,
                                           const DOUBLE closest_icell_xpos, const DOUBLE closest_icell_ypos, const DOUBLE closest_icell_zpos,
                                           DOUBLE *src_ravg, uint64_t *src_npairs,
                                           DOUBLE *src_weightavg, const weight_method_t weight_method)
{
    uint64_t npair[nbin];
    AVX_FLOATS m_rupp_sqr[nbin];
    for(int i=0;i<nbin;i++) {
        npair[i] = 0;
        m_rupp_sqr[i] = AVX_SET_FLOAT(rupp_sqr[i]);
    }

    const int32_t need_ravg = src_ravg != NULL;
    const int32_t need_weightavg = src_weightavg != NULL;

    AVX_FLOATS m_kbin[nbin];
    DOUBLE ravg[nbin], weightavg[nbin];
    if(need_ravg || need_weightavg){
      for(int i=0;i<nbin;i++) {
        m_kbin[i] = AVX_SET_FLOAT((DOUBLE) i);
        if(need_ravg){
          ravg[i] = ZERO;
        }
        if(need_weightavg){
          weightavg[i] = ZERO;
        }
      }
    }

    // A copy whose pointers we can advance
    weight_struct_DOUBLE local_w1 = {.weights={NULL}, .num_weights=0}, local_w2 = {.weights={NULL}, .num_weights=0};
    pair_struct_DOUBLE pair = {.num_weights=0};
    avx_weight_func_t_DOUBLE avx_weight_func = NULL;
    weight_func_t_DOUBLE fallback_weight_func = NULL;
    if(need_weightavg){
      // Same particle list, new copy of num_weights pointers into that list
      local_w1 = *weights1;
      local_w2 = *weights2;

      pair.num_weights = local_w1.num_weights;

      avx_weight_func = get_avx_weight_func_by_method_DOUBLE(weight_method);
      fallback_weight_func = get_weight_func_by_method_DOUBLE(weight_method);
    }

    const DOUBLE *zstart = z2, *zend = z2 + N2;
    const DOUBLE max_all_dz = SQRT(sqr_rmax - min_xdiff*min_xdiff - min_ydiff*min_ydiff);
    for(int64_t i=0;i<N1;i++) {
        const DOUBLE xpos = *x1++ + off_xwrap;
        const DOUBLE ypos = *y1++ + off_ywrap;
        const DOUBLE zpos = *z1++ + off_zwrap;
        for(int w = 0; w < pair.num_weights; w++){
            // local_w1.weights[w] is a pointer to a float in the particle list of weights,
            // just as x0 is a pointer into the list of x-positions.
            // The advancement of the local_w1.weights[w] pointer should always mirror x0.
            pair.weights0[w].a = AVX_SET_FLOAT(*(local_w1.weights[w])++);
        }
        DOUBLE max_dz = max_all_dz;

        /* Now consider if this i'th particle can be a valid pair with ANY of the remaining
           j' particles. The min. difference in the z-positions between this i'th particle and ANY
           of the remaining j'th particles, is the difference between the current j'th particle and
           the current i'th particle (since all remaining j'th particles will have a larger value for
           the z-ordinate and therefore a larger difference to zpos). if this `dz` does not satisfy
           the distance criteria, then NO remaining j'th particles will. Continue on to the next i'th
           particle
        */
        const DOUBLE this_dz = *z2 - zpos;
        if(this_dz >= max_all_dz) {
            continue;
        }

        if(same_cell == 1) {
            z2++;
        } else {
            // Now add the x,y information to further limit the range of secondaries for this particle
            // But note this constraint may increase or decrease for the next particle, since x,y aren't sorted!
            const DOUBLE min_dx = min_xdiff > 0 ? min_xdiff + FABS(xpos - closest_icell_xpos):min_xdiff;
            const DOUBLE min_dy = min_ydiff > 0 ? min_ydiff + FABS(ypos - closest_icell_ypos):min_ydiff;
            const DOUBLE min_dz = min_zdiff > 0 ? (this_dz > 0 ? this_dz:min_zdiff + FABS(zpos - closest_icell_zpos)):min_zdiff;
            const DOUBLE sqr_min_sep_this_point = min_dx*min_dx + min_dy*min_dy + min_dz*min_dz;
            if(sqr_min_sep_this_point >= sqr_rmax) {
                continue;
            }
            max_dz = SQRT(sqr_rmax - min_dx*min_dx - min_dy*min_dy);

            // Now "fast forward" in the list of secondary particles to find the first one that satisfies the max_all_dz constraint
            // We don't consider the i particle's x,y information yet, because those aren't sorted
            DOUBLE target_z = zpos - max_all_dz;
            while(z2 < zend && *z2 <= target_z) {
                z2++;
            }
        } /* end of same_cell if condition*/

        // If no j particle satisfies the constraint for this i particle,
        // then the same holds true for all future i particles because they are sorted in increasing z order
        if(z2 == zend) {
            i = N1;
            break;
        }


        DOUBLE *localz2 = z2;
        const DOUBLE target_z = zpos - max_dz;
        while(localz2 != zend && *localz2 <= target_z) {
            localz2++;
        }

        int64_t j = localz2 - zstart;
        DOUBLE *localx2 = x2 + j;
        DOUBLE *localy2 = y2 + j;
        for(int w = 0; w < local_w2.num_weights; w++){
            local_w2.weights[w] = weights2->weights[w] + j;
        }

        for(;j<=(N2-AVX_NVEC);j+=AVX_NVEC) {
            const AVX_FLOATS m_xpos    = AVX_SET_FLOAT(xpos);
            const AVX_FLOATS m_ypos    = AVX_SET_FLOAT(ypos);
            const AVX_FLOATS m_zpos    = AVX_SET_FLOAT(zpos);

            union int8 union_rbin;
            union float8 union_mDperp;
            union float8_weights union_mweight;

            const AVX_FLOATS m_x2 = AVX_LOAD_FLOATS_UNALIGNED(localx2);
            const AVX_FLOATS m_y2 = AVX_LOAD_FLOATS_UNALIGNED(localy2);
            const AVX_FLOATS m_z2 = AVX_LOAD_FLOATS_UNALIGNED(localz2);

            localx2 += AVX_NVEC;//this might actually exceed the allocated range but we will never dereference that
            localy2 += AVX_NVEC;
            localz2 += AVX_NVEC;

            for(int w = 0; w < pair.num_weights; w++){
                pair.weights1[w].a = AVX_LOAD_FLOATS_UNALIGNED(local_w2.weights[w]);
                local_w2.weights[w] += AVX_NVEC;
            }


            const AVX_FLOATS m_max_dz = AVX_SET_FLOAT(max_dz);
            const AVX_FLOATS m_xdiff = AVX_SUBTRACT_FLOATS(m_x2, m_xpos);  //(x[j] - x0)
            const AVX_FLOATS m_ydiff = AVX_SUBTRACT_FLOATS(m_y2, m_ypos);  //(y[j] - y0)
            const AVX_FLOATS m_zdiff = AVX_SUBTRACT_FLOATS(m_z2, m_zpos);  //z2[j:j+NVEC-1] - z1

            if(need_weightavg){
                pair.dx.a = m_xdiff;
                pair.dy.a = m_ydiff;
                pair.dz.a = m_zdiff;
            }

            const AVX_FLOATS m_sqr_xdiff = AVX_SQUARE_FLOAT(m_xdiff);  //(x0 - x[j])^2
            const AVX_FLOATS m_sqr_ydiff = AVX_SQUARE_FLOAT(m_ydiff);  //(y0 - y[j])^2
            const AVX_FLOATS m_sqr_zdiff = AVX_SQUARE_FLOAT(m_zdiff);
            AVX_FLOATS r2  = AVX_ADD_FLOATS(m_sqr_xdiff,AVX_ADD_FLOATS(m_sqr_ydiff, m_sqr_zdiff));

            AVX_FLOATS m_mask_left;

            //Do all the distance cuts using masks here in new scope
            {
                //the z2 arrays are sorted in increasing order. which means
                //the z2 value will increase in any future iteration of j.
                //that implies the zdiff values are also monotonically increasing
                //Therefore, if any of the zdiff values are >= max_dz, then
                //no future iteration in j can produce a r < rmax rmax.
                //(But this iteration might still contain values within rmax -- i.e., don't
                // break out of this iteration.
                const AVX_FLOATS m_mask_geq_pimax = AVX_COMPARE_FLOATS(m_zdiff,m_max_dz,_CMP_GE_OQ);
                if(AVX_TEST_COMPARISON(m_mask_geq_pimax) > 0){
                    j=N2;//stop the next iteration of the j'loop but do not break out of this current interation
                }

                const AVX_FLOATS m_rmax_mask = AVX_COMPARE_FLOATS(r2, m_rupp_sqr[nbin-1], _CMP_LT_OQ);
                const AVX_FLOATS m_rmin_mask = AVX_COMPARE_FLOATS(r2, m_rupp_sqr[0], _CMP_GE_OQ);
                m_mask_left = AVX_BITWISE_AND(m_rmax_mask, m_rmin_mask);

                //If not, continue with the next iteration of j-loop
                if(AVX_TEST_COMPARISON(m_mask_left) == 0) {
                    continue;
                }

                //There is some r2 that satisfies sqr_rmin <= r2 < sqr_rmax && 0.0 <= dz^2 < rmax^2.
                r2 = AVX_BLEND_FLOATS_WITH_MASK(m_rupp_sqr[nbin-1], r2, m_mask_left);
            }

            AVX_FLOATS m_rbin = AVX_SETZERO_FLOAT();
            if(need_ravg) {
                union_mDperp.m_Dperp = AVX_SQRT_FLOAT(r2);
            }
            if(need_weightavg){
                union_mweight.m_weights = avx_weight_func(&pair);
            }

            //Loop backwards through nbins. m_mask_left contains all the points that are less than rmax
            for(int kbin=nbin-1;kbin>=1;kbin--) {
                const AVX_FLOATS m1 = AVX_COMPARE_FLOATS(r2,m_rupp_sqr[kbin-1],_CMP_GE_OQ);
                const AVX_FLOATS m_bin_mask = AVX_BITWISE_AND(m1,m_mask_left);
                const int test2  = AVX_TEST_COMPARISON(m_bin_mask);
                npair[kbin] += AVX_BIT_COUNT_INT(test2);
                if(need_ravg || need_weightavg) {
                    m_rbin = AVX_BLEND_FLOATS_WITH_MASK(m_rbin,m_kbin[kbin], m_bin_mask);
                }
                m_mask_left = AVX_COMPARE_FLOATS(r2,m_rupp_sqr[kbin-1],_CMP_LT_OQ);
                const int test3 = AVX_TEST_COMPARISON(m_mask_left);
                if(test3 == 0) {
                    break;
                }
            }

            if(need_ravg || need_weightavg) {
                union_rbin.m_ibin = AVX_TRUNCATE_FLOAT_TO_INT(m_rbin);
                //protect the unroll pragma in case compiler is not icc.
#if  __INTEL_COMPILER
#pragma unroll(AVX_NVEC)
#endif
                for(int jj=0;jj<AVX_NVEC;jj++) {
                    const int kbin = union_rbin.ibin[jj];
                    if(need_ravg){
                        const DOUBLE r = union_mDperp.Dperp[jj];
                        ravg[kbin] += r;
                    }
                    if(need_weightavg){
                        const DOUBLE weight = union_mweight.weights[jj];
                        weightavg[kbin] += weight;
                    }
                }
            }
        }//end of j-loop

        //remainder loop
        for(;j<N2;j++){
            const DOUBLE dz = *localz2++ - zpos;
            const DOUBLE dx = *localx2++ - xpos;
            const DOUBLE dy = *localy2++ - ypos;
            for(int w = 0; w < pair.num_weights; w++){
                pair.weights1[w].d = *local_w2.weights[w]++;
            }
            if(dz >= max_dz) break;

            const DOUBLE r2 = dx*dx + dy*dy + dz*dz;
            if(r2 >= sqr_rmax || r2 < sqr_rmin) {
                continue;
            }

            if(need_weightavg){
                pair.dx.d = dx;
                pair.dy.d = dy;
                pair.dz.d = dz;
            }

            DOUBLE r = ZERO, pairweight = ZERO;
            if(need_ravg) {
                r = SQRT(r2);
            }
            if(need_weightavg){
                pairweight = fallback_weight_func(&pair);
            }

            for(int kbin=nbin-1;kbin>=1;kbin--) {
                if(r2 >= rupp_sqr[kbin-1]) {
                    npair[kbin]++;
                    if(need_ravg) {
                        ravg[kbin] += r;
                    }
                    if(need_weightavg){
                        weightavg[kbin] += pairweight;
                    }
                    break;
                }
            }
        }//remainder loop over cellstruct second
    }//loop over cellstruct first

	for(int i=0;i<nbin;i++) {
		src_npairs[i] += npair[i];
        if(need_ravg) {
          src_ravg[i] += ravg[i];
        }
        if(need_weightavg) {
          src_weightavg[i] += weightavg[i];
        }
    }

    return EXIT_SUCCESS;
}
#endif //__AVX__



#if defined (__SSE4_2__)
#include "sse_calls.h"

static inline int xi_sse_intrinsics_DOUBLE(DOUBLE *x0, DOUBLE *y0, DOUBLE *z0, const weight_struct_DOUBLE *weights0, const int64_t N0,
                                           DOUBLE *x1, DOUBLE *y1, DOUBLE *z1, const weight_struct_DOUBLE *weights1, const int64_t N1, const int same_cell,
                                           const DOUBLE sqr_rmax, const DOUBLE sqr_rmin, const int nbin, const DOUBLE *rupp_sqr,
                                           const DOUBLE off_xwrap, const DOUBLE off_ywrap, const DOUBLE off_zwrap,
                                           const DOUBLE min_xdiff, const DOUBLE min_ydiff, const DOUBLE min_zdiff,
                                           const DOUBLE closest_icell_xpos, const DOUBLE closest_icell_ypos, const DOUBLE closest_icell_zpos,
                                           DOUBLE *src_ravg, uint64_t *src_npairs,
                                           DOUBLE *src_weightavg, const weight_method_t weight_method)
{
    uint64_t npairs[nbin];
    SSE_FLOATS m_rupp_sqr[nbin];
    for(int i=0;i<nbin;i++) {
        npairs[i] = ZERO;
        m_rupp_sqr[i] = SSE_SET_FLOAT(rupp_sqr[i]);
    }

    const int32_t need_ravg = src_ravg != NULL;
    const int32_t need_weightavg = src_weightavg != NULL;
    DOUBLE ravg[nbin], weightavg[nbin];
    SSE_FLOATS m_kbin[nbin];
    if(need_ravg || need_weightavg){
        for(int i=0;i<nbin;i++) {
            m_kbin[i] = SSE_SET_FLOAT((DOUBLE) i);
            if(need_ravg) {
                ravg[i] = ZERO;
            }
            if(need_weightavg){
                weightavg[i] = ZERO;
            }
        }
    }

    // A copy whose pointers we can advance
    weight_struct_DOUBLE local_w0 = {.weights={NULL}, .num_weights=0}, local_w1 = {.weights={NULL}, .num_weights=0};
    pair_struct_DOUBLE pair = {.num_weights=0};
    sse_weight_func_t_DOUBLE sse_weight_func = NULL;
    weight_func_t_DOUBLE fallback_weight_func = NULL;
    if(need_weightavg){
      // Same particle list, new copy of num_weights pointers into that list
      local_w0 = *weights0;
      local_w1 = *weights1;

      pair.num_weights = local_w0.num_weights;

      sse_weight_func = get_sse_weight_func_by_method_DOUBLE(weight_method);
      fallback_weight_func = get_weight_func_by_method_DOUBLE(weight_method);
    }

    const DOUBLE *zstart = z1, *zend = z1 + N1;
    const DOUBLE max_all_dz = SQRT(sqr_rmax - min_xdiff*min_xdiff - min_ydiff*min_ydiff);
    for(int64_t i=0;i<N0;i++) {
        const DOUBLE xpos = *x0++ + off_xwrap;
        const DOUBLE ypos = *y0++ + off_ywrap;
        const DOUBLE zpos = *z0++ + off_zwrap;
        for(int w = 0; w < pair.num_weights; w++){
            // local_w0.weights[w] is a pointer to a float in the particle list of weights,
            // just as x0 is a pointer into the list of x-positions.
            // The advancement of the local_w0.weights[w] pointer should always mirror x0.
            pair.weights0[w].s = SSE_SET_FLOAT(*local_w0.weights[w]++);
        }
        DOUBLE max_dz = max_all_dz;

        /* Now consider if this i'th particle can be a valid pair with ANY of the remaining
           j' particles. The min. difference in the z-positions between this i'th particle and ANY
           of the remaining j'th particles, is the difference between the current j'th particle and
           the current i'th particle (since all remaining j'th particles will have a larger value for
           the z-ordinate and therefore a larger difference to zpos). if this `dz` does not satisfy
           the distance criteria, then NO remaining j'th particles will. Continue on to the next i'th
           particle
        */
        const DOUBLE this_dz = *z1 - zpos;
        if(this_dz >= max_all_dz) {
            continue;
        }

        if(same_cell == 1) {
            z1++;
        } else {
            // Now add the x,y information to further limit the range of secondaries for this particle
            // But note this constraint may increase or decrease for the next particle, since x,y aren't sorted!
            const DOUBLE min_dx = min_xdiff > 0 ? min_xdiff + FABS(xpos - closest_icell_xpos):min_xdiff;
            const DOUBLE min_dy = min_ydiff > 0 ? min_ydiff + FABS(ypos - closest_icell_ypos):min_ydiff;
            const DOUBLE min_dz = min_zdiff > 0 ? (this_dz > 0 ? this_dz:min_zdiff + FABS(zpos - closest_icell_zpos)):min_zdiff;
            const DOUBLE sqr_min_sep_this_point = min_dx*min_dx + min_dy*min_dy + min_dz*min_dz;
            if(sqr_min_sep_this_point >= sqr_rmax) {
                continue;
            }
            max_dz = SQRT(sqr_rmax - min_dx*min_dx - min_dy*min_dy);

            // Now "fast forward" in the list of secondary particles to find the first one that satisfies the max_all_dz constraint
            // We don't consider the i particle's x,y information yet, because those aren't sorted
            DOUBLE target_z = zpos - max_all_dz;
            while(z1 < zend && *z1 <= target_z) {
                z1++;
            }
        } /* end of same_cell if condition*/

        // If no j particle satisfies the constraint for this i particle,
        // then the same holds true for all future i particles because they are sorted in increasing z order
        if(z1 == zend) {
            i = N0;
            break;
        }

        DOUBLE *localz1 = z1;
        const DOUBLE target_z = zpos - max_dz;
        while(localz1 != zend && *localz1 <= target_z) {
            localz1++;
        }

        int64_t j = localz1 - zstart;
        DOUBLE *localx1 = x1 + j;
        DOUBLE *localy1 = y1 + j;
        for(int w = 0; w < local_w1.num_weights; w++){
            local_w1.weights[w] = weights1->weights[w] + j;
        }

		for(;j<=(N1 - SSE_NVEC);j+=SSE_NVEC){

            const SSE_FLOATS m_xpos = SSE_SET_FLOAT(xpos);
            const SSE_FLOATS m_ypos = SSE_SET_FLOAT(ypos);
            const SSE_FLOATS m_zpos = SSE_SET_FLOAT(zpos);

            const SSE_FLOATS m_x1 = SSE_LOAD_FLOATS_UNALIGNED(localx1);
			const SSE_FLOATS m_y1 = SSE_LOAD_FLOATS_UNALIGNED(localy1);
			const SSE_FLOATS m_z1 = SSE_LOAD_FLOATS_UNALIGNED(localz1);

			localx1 += SSE_NVEC;
			localy1 += SSE_NVEC;
			localz1 += SSE_NVEC;

            for(int w = 0; w < pair.num_weights; w++){
                pair.weights1[w].s = SSE_LOAD_FLOATS_UNALIGNED(local_w1.weights[w]);
                local_w1.weights[w] += SSE_NVEC;
            }

            union int4 union_rbin;
            union float4 union_mDperp;
            union float4_weights union_mweight;

            const SSE_FLOATS m_max_dz = SSE_SET_FLOAT(max_dz);
			const SSE_FLOATS m_sqr_rmax = SSE_SET_FLOAT(sqr_rmax);
			const SSE_FLOATS m_sqr_rmin = SSE_SET_FLOAT(sqr_rmin);


            const SSE_FLOATS m_xdiff = SSE_SUBTRACT_FLOATS(m_x1, m_xpos);  //(x[j] - x0)
            const SSE_FLOATS m_ydiff = SSE_SUBTRACT_FLOATS(m_y1, m_ypos);  //(y[j] - y0)
            const SSE_FLOATS m_zdiff = SSE_SUBTRACT_FLOATS(m_z1, m_zpos);  //z2[j:j+NVEC-1] - z1

            const SSE_FLOATS m_pimax_geq_mask = SSE_COMPARE_FLOATS_GE(m_zdiff,m_max_dz);
            if(SSE_TEST_COMPARISON(m_pimax_geq_mask) > 0) {
                j = N1;//but do not break yet -> there might be valid pairs in this chunk
            }

            const SSE_FLOATS m_sqr_xdiff = SSE_SQUARE_FLOAT(m_xdiff);
            const SSE_FLOATS m_sqr_ydiff = SSE_SQUARE_FLOAT(m_ydiff);
            const SSE_FLOATS m_sqr_zdiff = SSE_SQUARE_FLOAT(m_zdiff);

            if(need_weightavg){
                pair.dx.s = m_xdiff;
                pair.dy.s = m_ydiff;
                pair.dz.s = m_zdiff;
            }

            SSE_FLOATS r2  = SSE_ADD_FLOATS(m_sqr_zdiff,SSE_ADD_FLOATS(m_sqr_xdiff,m_sqr_ydiff));
            SSE_FLOATS m_mask_left = SSE_SETZERO_FLOAT();
            const SSE_FLOATS m_rmin_mask = SSE_COMPARE_FLOATS_GE(r2, m_sqr_rmin);
            const SSE_FLOATS m_rmax_mask = SSE_COMPARE_FLOATS_LT(r2,m_sqr_rmax);
            m_mask_left = SSE_BITWISE_AND(m_rmin_mask, m_rmax_mask);
            if(SSE_TEST_COMPARISON(m_mask_left) == 0) {
                continue;
            }
            r2 = SSE_BLEND_FLOATS_WITH_MASK(m_sqr_rmax, r2, m_mask_left);

            SSE_FLOATS m_rbin = SSE_SETZERO_FLOAT();
            if(need_ravg) {
                union_mDperp.m_Dperp = SSE_SQRT_FLOAT(r2);
            }
            if(need_weightavg){
                union_mweight.m_weights = sse_weight_func(&pair);
            }

			for(int kbin=nbin-1;kbin>=1;kbin--) {
				SSE_FLOATS m1 = SSE_COMPARE_FLOATS_GE(r2,m_rupp_sqr[kbin-1]);
				SSE_FLOATS m_bin_mask = SSE_BITWISE_AND(m1,m_mask_left);
				m_mask_left = SSE_COMPARE_FLOATS_LT(r2,m_rupp_sqr[kbin-1]);
				int test2  = SSE_TEST_COMPARISON(m_bin_mask);
				npairs[kbin] += SSE_BIT_COUNT_INT(test2);
                if(need_ravg || need_weightavg) {
                    m_rbin = SSE_BLEND_FLOATS_WITH_MASK(m_rbin,m_kbin[kbin], m_bin_mask);
                }
				int test3 = SSE_TEST_COMPARISON(m_mask_left);
				if(test3 == 0) {
					break;
				}
			}

            if(need_ravg || need_weightavg) {
                union_rbin.m_ibin = SSE_TRUNCATE_FLOAT_TO_INT(m_rbin);
                //protect the unroll pragma in case compiler is not icc.
#if  __INTEL_COMPILER
#pragma unroll(SSE_NVEC)
#endif
                for(int jj=0;jj<SSE_NVEC;jj++) {
                    const int kbin = union_rbin.ibin[jj];
                    if(need_ravg){
                        const DOUBLE r = union_mDperp.Dperp[jj];
                        ravg[kbin] += r;
                    }
                    if(need_weightavg){
                        const DOUBLE weight = union_mweight.weights[jj];
                        weightavg[kbin] += weight;
                    }
                }
            }//need_ravg
		}//j-loop

		for(;j<N1;j++) {
			const DOUBLE dx = *localx1++ - xpos;
			const DOUBLE dy = *localy1++ - ypos;
			const DOUBLE dz = *localz1++ - zpos;
            for(int w = 0; w < pair.num_weights; w++){
                pair.weights1[w].d = *local_w1.weights[w]++;
            }
            if(dz >= max_dz) break;

			const DOUBLE r2 = dx*dx + dy*dy + dz*dz;
			if(r2 >= sqr_rmax || r2 < sqr_rmin) continue;

            if(need_weightavg){
                pair.dx.d = dx;
                pair.dy.d = dy;
                pair.dz.d = dz;
            }

            DOUBLE r = ZERO, pairweight = ZERO;
            if(need_ravg) {
                r = SQRT(r2);
            }
            if(need_weightavg){
                pairweight = fallback_weight_func(&pair);
            }

			for(int kbin=nbin-1;kbin>=1;kbin--){
				if(r2 >= rupp_sqr[kbin-1]) {
					npairs[kbin]++;
                    if(need_ravg) {
                        ravg[kbin] += r;
                    }
                    if(need_weightavg){
                        weightavg[kbin] += pairweight;
                    }
					break;
				}
			}//searching for kbin loop
		}
    }

	for(int i=0;i<nbin;i++) {
		src_npairs[i] += npairs[i];
        if(need_ravg) {
            src_ravg[i] += ravg[i];
        }
        if(need_weightavg) {
            src_weightavg[i] += weightavg[i];
        }
	}

    return EXIT_SUCCESS;
}

#endif //__SSE4_2__

static inline int xi_fallback_DOUBLE(DOUBLE *x0, DOUBLE *y0, DOUBLE *z0, const weight_struct_DOUBLE *weights0, const int64_t N0,
                                     DOUBLE *x1, DOUBLE *y1, DOUBLE *z1, const weight_struct_DOUBLE *weights1, const int64_t N1, const int same_cell,
                                     const DOUBLE sqr_rmax, const DOUBLE sqr_rmin, const int nbin, const DOUBLE *rupp_sqr,
                                     const DOUBLE off_xwrap, const DOUBLE off_ywrap, const DOUBLE off_zwrap,
                                     const DOUBLE min_xdiff, const DOUBLE min_ydiff, const DOUBLE min_zdiff,
                                     const DOUBLE closest_icell_xpos, const DOUBLE closest_icell_ypos, const DOUBLE closest_icell_zpos,
                                     DOUBLE *src_ravg, uint64_t *src_npairs,
                                     DOUBLE *src_weightavg, const weight_method_t weight_method)
{
    /*----------------- FALLBACK CODE --------------------*/
    uint64_t npairs[nbin];
    for(int i=0;i<nbin;i++) {
        npairs[i]=0;
    }

    const int32_t need_ravg = src_ravg != NULL;
    const int32_t need_weightavg = src_weightavg != NULL;
    DOUBLE ravg[nbin], weightavg[nbin];
    for(int i=0;i<nbin;i++) {
        if(need_ravg) {
            ravg[i]=0.;
        }
        if(need_weightavg){
            weightavg[i]=0.;
        }
    }

    // A copy whose pointers we can advance
    weight_struct_DOUBLE local_w0 = {.weights={NULL}, .num_weights=0}, local_w1 = {.weights={NULL}, .num_weights=0};
    pair_struct_DOUBLE pair = {.num_weights=0};
    weight_func_t_DOUBLE weight_func = NULL;
    if(need_weightavg){
      // Same particle list, new copy of num_weights pointers into that list
      local_w0 = *weights0;
      local_w1 = *weights1;

      pair.num_weights = local_w0.num_weights;
      weight_func = get_weight_func_by_method_DOUBLE(weight_method);
    }

    const DOUBLE *zstart = z1, *zend = z1 + N1;
    const DOUBLE max_all_dz = SQRT(sqr_rmax - min_xdiff*min_xdiff - min_ydiff*min_ydiff);
    for(int64_t i=0;i<N0;i++) {
        const DOUBLE xpos = *x0++ + off_xwrap;
        const DOUBLE ypos = *y0++ + off_ywrap;
        const DOUBLE zpos = *z0++ + off_zwrap;
        for(int w = 0; w < pair.num_weights; w++){
            pair.weights0[w].d = *local_w0.weights[w]++;
        }
        DOUBLE max_dz = max_all_dz;

        /* Now consider if this i'th particle can be a valid pair with ANY of the remaining
           j' particles. The min. difference in the z-positions between this i'th particle and ANY
           of the remaining j'th particles, is the difference between the current j'th particle and
           the current i'th particle (since all remaining j'th particles will have a larger value for
           the z-ordinate and therefore a larger difference to zpos). if this `dz` does not satisfy
           the distance criteria, then NO remaining j'th particles will. Continue on to the next i'th
           particle
        */
        const DOUBLE this_dz = *z1 - zpos;
        if(this_dz >= max_all_dz) {
            continue;
        }

        if(same_cell == 1) {
            z1++;
        } else {
            // Now add the x,y information to further limit the range of secondaries for this particle
            // But note this constraint may increase or decrease for the next particle, since x,y aren't sorted!
            const DOUBLE min_dx = min_xdiff > 0 ? min_xdiff + FABS(xpos - closest_icell_xpos):min_xdiff;
            const DOUBLE min_dy = min_ydiff > 0 ? min_ydiff + FABS(ypos - closest_icell_ypos):min_ydiff;
            const DOUBLE min_dz = min_zdiff > 0 ? (this_dz > 0 ? this_dz:min_zdiff + FABS(zpos - closest_icell_zpos)):min_zdiff;
            const DOUBLE sqr_min_sep_this_point = min_dx*min_dx + min_dy*min_dy + min_dz*min_dz;
            if(sqr_min_sep_this_point >= sqr_rmax) {
                continue;
            }
            max_dz = SQRT(sqr_rmax - min_dx*min_dx - min_dy*min_dy);

            // Now "fast forward" in the list of secondary particles to find the first one that satisfies the max_all_dz constraint
            // We don't consider the i particle's x,y information yet, because those aren't sorted
            DOUBLE target_z = zpos - max_all_dz;
            while(z1 < zend && *z1 <= target_z) {
                z1++;
            }
        } /* end of same_cell if condition*/

        // If no j particle satisfies the constraint for this primary i particle,
        // then the same holds true for all future i particles because they are sorted in increasing z order
        if(z1 == zend) {
            i = N0;
            break;
        }


        DOUBLE *localz1 = z1;
        const DOUBLE target_z = zpos - max_dz;
        while(localz1 != zend && *localz1 <= target_z) {
            localz1++;
        }

        const int64_t n_off = localz1 - zstart;
        const int64_t nleft = zend - localz1;
        DOUBLE *localx1 = x1 + n_off;
        DOUBLE *localy1 = y1 + n_off;
        for(int w = 0; w < pair.num_weights; w++){
            local_w1.weights[w] = weights1->weights[w] + n_off;
        }

        for(int64_t j=0;j<nleft;j++) {
            const DOUBLE dx = *localx1++ - xpos;
            const DOUBLE dy = *localy1++ - ypos;
            const DOUBLE dz = *localz1++ - zpos;
            for(int w = 0; w < pair.num_weights; w++){
                pair.weights1[w].d = *local_w1.weights[w]++;
            }
            if(dz >= max_dz) break;

            const DOUBLE r2 = dx*dx + dy*dy + dz*dz;

            if(r2 >= sqr_rmax || r2 < sqr_rmin) continue;
            if(need_weightavg){
                pair.dx.d = dx;
                pair.dy.d = dy;
                pair.dz.d = dz;
            }

            DOUBLE r = ZERO, pairweight = ZERO;
            if(need_ravg) {
                r = SQRT(r2);
            }
            if(need_weightavg){
                pairweight = weight_func(&pair);
            }

            for(int kbin=nbin-1;kbin>=1;kbin--){
                if(r2 >= rupp_sqr[kbin-1]) {
                    npairs[kbin]++;
                    if(need_ravg) {
                        ravg[kbin] += r;
                    }
                    if(need_weightavg){
                        weightavg[kbin] += pairweight;
                    }
                    break;
                }
            }//searching for kbin loop
        }
    }

    for(int i=0;i<nbin;i++) {
        src_npairs[i] += npairs[i];
        if(need_ravg) {
            src_ravg[i] += ravg[i];
        }
        if(need_weightavg){
            src_weightavg[i] += weightavg[i];
        }
    }
    /*----------------- FALLBACK CODE --------------------*/
    return EXIT_SUCCESS;
}
