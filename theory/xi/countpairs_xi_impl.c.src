// # -*- mode: c -*-
/* File: countpairs_xi_impl.c.src */
/*
  This file is a part of the Corrfunc package
  Copyright (C) 2015-- Manodeep Sinha (manodeep@gmail.com)
  License: MIT LICENSE. See LICENSE file under the top-level
  directory at https://github.com/manodeep/Corrfunc/
*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <inttypes.h>
#include <signal.h>
#include <unistd.h>

#include "countpairs_xi_impl_DOUBLE.h" //function proto-type
#include "xi_kernels_DOUBLE.c"

#include "defs.h"
#include "utils.h" //all of the utilities
#include "progressbar.h" //for the progressbar
#include "cpu_features.h" //prototype instrset_detect required for runtime dispatch

#include "gridlink_impl_DOUBLE.h"//function proto-type for gridlink
#include "gridlink_utils_DOUBLE.h" //for associated helper routines

#if defined(_OPENMP)
#include <omp.h>
#endif

int interrupt_status_xi_DOUBLE=EXIT_SUCCESS;

void interrupt_handler_countpairs_xi_DOUBLE(int signo)
{
    fprintf(stderr,"Received signal = `%s' (signo = %d). Aborting \n",strsignal(signo), signo);
    interrupt_status_xi_DOUBLE = EXIT_FAILURE;
}

xi_func_ptr_DOUBLE xi_driver_DOUBLE(const struct config_options *options)
{
    static xi_func_ptr_DOUBLE function = NULL;
    static isa old_isa = (isa) -1;
    if(old_isa == options->instruction_set) {
        return function;
    }

    //Seriously this is the declaration for the function pointers...here be dragons.
    xi_func_ptr_DOUBLE allfunctions[] = {
#ifdef __AVX512F__
      xi_avx512_intrinsics_DOUBLE,
#endif
#ifdef __AVX__
      xi_avx_intrinsics_DOUBLE,
#endif
#ifdef __SSE4_2__
      xi_sse_intrinsics_DOUBLE,
#endif
      xi_fallback_DOUBLE
    };
    const int num_functions = sizeof(allfunctions)/sizeof(void *);
    const int fallback_offset = num_functions - 1;
#if defined(__AVX512F__) || defined(__AVX__) || defined(__SSE4_2__)
    const int highest_isa = instrset_detect();
#endif
    int curr_offset = 0;
    /* Check for AVX512F support */
    int avx512_offset = fallback_offset;
#ifdef __AVX512F__
    avx512_offset = highest_isa >= 9 ? curr_offset:fallback_offset;
    curr_offset++;
#endif

    /* Now check if AVX is supported by the CPU */
    int avx_offset = fallback_offset;
#ifdef __AVX__
    avx_offset = highest_isa >= 7 ? curr_offset:fallback_offset;
    curr_offset++;
#endif

    /* Is the SSE function supported at runtime and enabled at compile-time?*/
    int sse_offset = fallback_offset;
#ifdef __SSE4_2__
    sse_offset = highest_isa >= 6 ? curr_offset:fallback_offset;
    curr_offset++;
#endif
    if( curr_offset != fallback_offset) {
      fprintf(stderr,"ERROR: Bug in code (current offset = %d *should equal* fallback function offset = %d)\n",
              curr_offset, fallback_offset);
      return NULL;
    }

    int function_dispatch=0;
    /* Check that cpu supports feature */
    if(options->instruction_set >= 0) {
        switch(options->instruction_set) {
        case(AVX512F):function_dispatch=avx512_offset;break;
        case(AVX2):
        case(AVX): function_dispatch=avx_offset;break;
        case(SSE42):function_dispatch=sse_offset;break;
        default:function_dispatch=fallback_offset;break;
        }
    }

    if(function_dispatch >= num_functions) {
      fprintf(stderr,"In %s> ERROR: Could not resolve the correct function.\n Function index = %d must lie between [0, %d)\n",
              __FUNCTION__, function_dispatch, num_functions);
      return NULL;
    }
    function = allfunctions[function_dispatch];
    old_isa = options->instruction_set;

    if(options->verbose){
        // This must be first (AVX/SSE may be aliased to fallback)
        if(function_dispatch == fallback_offset){
            fprintf(stderr,"Using fallback kernel\n");
        } else if(function_dispatch == avx512_offset){
            fprintf(stderr,"Using AVX512 kernel\n");
        } else if(function_dispatch == avx_offset){
            fprintf(stderr,"Using AVX kernel\n");
        } else if(function_dispatch == sse_offset){
            fprintf(stderr,"Using SSE kernel\n");
        } else {
            fprintf(stderr, "Unknown kernel!\n");
            return NULL;
        }
    }

    return function;
}


int countpairs_xi_DOUBLE(const int64_t ND, DOUBLE * restrict X, DOUBLE * restrict Y, DOUBLE * restrict Z,
                         const double boxsize,
                         const int numthreads,
                         const char *binfile,
                         results_countpairs_xi *results,
                         struct config_options *options,
                         struct extra_options *extra)
{
    if(options->float_type != sizeof(DOUBLE)) {
        fprintf(stderr,"ERROR: In %s> Can only handle arrays of size=%zu. Got an array of size = %zu\n",
                __FUNCTION__, sizeof(DOUBLE), options->float_type);
        return EXIT_FAILURE;
    }

    struct timeval t0;
    if(options->c_api_timer) {
        gettimeofday(&t0, NULL);
    }

    // If no extra options were passed, create dummy options
    // This allows us to pass arguments like "extra->weights0" below;
    // they'll just be NULLs, which is the correct behavior
    struct extra_options dummy_extra;
    if(extra == NULL){
      weight_method_t dummy_method = NONE;
      dummy_extra = get_extra_options(dummy_method);
      extra = &dummy_extra;
    }

    int need_weightavg = extra->weight_method != NONE;

    if(need_weightavg && extra->weight_method != PAIR_PRODUCT){
        fprintf(stderr, "Warning: a weight_method ( = %d ) other than pair_product was provided to countpairs_xi.  The computed results.xi will not be a weighted xi, since we only know how to compute the weighted RR term for pair_product.\n", extra->weight_method);
    }

#if defined(_OPENMP)
    omp_set_num_threads(numthreads);
#else
    (void) numthreads;
#endif

    options->periodic = 1;
    options->autocorr = 1;
    options->sort_on_z = 1;

    if(options->max_cells_per_dim == 0) {
        fprintf(stderr,"Warning: Max. cells per dimension is set to 0 - resetting to `NLATMAX' = %d\n", NLATMAX);
        options->max_cells_per_dim = NLATMAX;
    }
    //How many bins to subdivide rmax into -> affects runtime on O(20-30%) levels.
    //Check with your typical use-case and set appropriately. Values of 1,2 and 3 are
    //all you might need to check.
    for(int i=0;i<3;i++) {
        if(options->bin_refine_factors[i] < 1) {
            fprintf(stderr,"Warning: bin refine factor along axis = %d *must* be >=1. Instead found bin refine factor =%d\n",
                    i, options->bin_refine_factors[i]);
            reset_bin_refine_factors(options);
            break;/* all factors have been reset -> no point continuing with the loop */
        }
    }

    /* setup interrupt handler -> mostly useful during the python execution.
       Let's Ctrl-C abort the extension  */
    SETUP_INTERRUPT_HANDLERS(interrupt_handler_countpairs_xi_DOUBLE);

    /***********************
     *initializing the  bins
     ************************/
    double *rupp;
    int nbins;
    double rmin,rmax;
    setup_bins(binfile,&rmin,&rmax,&nbins,&rupp);
    if( ! (rmin >= 0.0 && rmax > 0.0 && rmin < rmax && nbins > 0)) {
        fprintf(stderr,"Error: Could not setup with R bins correctly. (rmin = %lf, rmax = %lf, with nbins = %d). Expected non-zero rmin/rmax with rmax > rmin and nbins >=1 \n",
                rmin, rmax, nbins);
        return EXIT_FAILURE;
    }
    if(get_bin_refine_scheme(options) == BINNING_DFL) {
        if(rmax < 0.05*boxsize) {
            for(int i=0;i<3;i++) {
                options->bin_refine_factors[i] = 1;
            }
        }
    }

    /*---Create 3-D lattice--------------------------------------*/
    int nmesh_x=0,nmesh_y=0,nmesh_z=0;
    const DOUBLE xmin = 0.0, xmax=boxsize;
    const DOUBLE ymin = 0.0, ymax=boxsize;
    const DOUBLE zmin = 0.0, zmax=boxsize;

    cellarray_DOUBLE *lattice = gridlink_DOUBLE(ND, X, Y, Z, &(extra->weights0),
                                                xmin, xmax, ymin, ymax, zmin, zmax,
                                                rmax, rmax, rmax,
                                                options->bin_refine_factors[0], options->bin_refine_factors[1], options->bin_refine_factors[2],
                                                &nmesh_x, &nmesh_y, &nmesh_z, options);
    if(lattice == NULL) {
        return EXIT_FAILURE;
    }

    /* If there too few cells (BOOST_CELL_THRESH is ~10), and the number of cells can be increased, then boost bin refine factor by ~1*/
      const double avg_np = ((double)ND)/(nmesh_x*nmesh_y*nmesh_z);
      const int max_nmesh = fmax(nmesh_x, fmax(nmesh_y, nmesh_z));
      if((max_nmesh <= BOOST_CELL_THRESH || avg_np >= BOOST_NUMPART_THRESH)
            && max_nmesh < options->max_cells_per_dim) {
          if(options->verbose) {
              fprintf(stderr,"%s> gridlink seems inefficient. nmesh = (%d, %d, %d); avg_np = %.3g. ", __FUNCTION__, nmesh_x, nmesh_y, nmesh_z, avg_np);
          }
          if(get_bin_refine_scheme(options) == BINNING_DFL) {
              if(options->verbose) {
                  fprintf(stderr,"Boosting bin refine factor - should lead to better performance\n");
                  fprintf(stderr,"xmin = %lf xmax=%lf rmax = %lf\n", xmin, xmax, rmax);
              }
            free_cellarray_DOUBLE(lattice, nmesh_x * (int64_t) nmesh_y * nmesh_z);
            // Only boost the first two dimensions.  Prevents excessive refinement.
            for(int i=0;i<2;i++) {
                options->bin_refine_factors[i] += BOOST_BIN_REF;
            }
            lattice = gridlink_DOUBLE(ND, X, Y, Z, &(extra->weights0),
                                      xmin, xmax, ymin, ymax, zmin, zmax,
                                      rmax, rmax, rmax,
                                      options->bin_refine_factors[0], options->bin_refine_factors[1], options->bin_refine_factors[2],
                                      &nmesh_x, &nmesh_y, &nmesh_z, options);
            if(lattice == NULL) {
                return EXIT_FAILURE;
            }

        } else {
              if(options->verbose) {
                  fprintf(stderr,"Boosting bin refine factor could have helped. However, since custom bin refine factors "
                          "= (%d, %d, %d) are being used - continuing with inefficient mesh\n", options->bin_refine_factors[0],
                          options->bin_refine_factors[1], options->bin_refine_factors[2]);
              }
          }
    }
    const int64_t totncells = (int64_t) nmesh_x * (int64_t) nmesh_y * (int64_t) nmesh_z;

    int64_t num_cell_pairs = 0;
    struct cell_pair_DOUBLE *all_cell_pairs = generate_cell_pairs_DOUBLE(lattice, lattice, totncells,
                                                                         &num_cell_pairs,
                                                                         options->bin_refine_factors[0],
                                                                         options->bin_refine_factors[1],
                                                                         options->bin_refine_factors[2],
                                                                         nmesh_x, nmesh_y, nmesh_z,
                                                                         boxsize, boxsize, boxsize,
                                                                         rmax, -1.0, -1.0, /*max_3D_sep, max_2D_sep, max_1D_sep*/
                                                                         options->enable_min_sep_opt,
                                                                         options->autocorr,
                                                                         options->periodic);
    if(all_cell_pairs == NULL) {
        free_cellarray_DOUBLE(lattice, totncells);
        free(rupp);
        return EXIT_FAILURE;
    }


    /* runtime dispatch - get the function pointer */
    xi_func_ptr_DOUBLE xi_function_DOUBLE = xi_driver_DOUBLE(options);
    if(xi_function_DOUBLE == NULL) {
        free_cellarray_DOUBLE(lattice, totncells);
        free(rupp);
        return EXIT_FAILURE;
    }


#if defined(_OPENMP)
    uint64_t **all_npairs = (uint64_t **) matrix_calloc(sizeof(uint64_t), numthreads, nbins);
    DOUBLE **all_ravg = NULL;
    if(options->need_avg_sep) {
        all_ravg = (DOUBLE **) matrix_calloc(sizeof(DOUBLE),numthreads,nbins);
    }
    DOUBLE **all_weightavg = NULL;
    if(need_weightavg) {
      all_weightavg = (DOUBLE **) matrix_calloc(sizeof(DOUBLE),numthreads,nbins);
    }


    if(all_npairs == NULL || (options->need_avg_sep && all_ravg == NULL) ||
       (need_weightavg && all_weightavg == NULL)) {
        free_cellarray_DOUBLE(lattice, totncells);
        matrix_free((void **) all_npairs, numthreads);
        if(options->need_avg_sep) {
            matrix_free((void **) all_ravg, numthreads);
        }
        if(need_weightavg) {
            matrix_free((void**) all_weightavg, numthreads);
        }
        free(rupp);
        return EXIT_FAILURE;
    }
#else
    uint64_t npairs[nbins];
    DOUBLE ravg[nbins];
    DOUBLE weightavg[nbins];

    for(int i=0; i < nbins;i++) {
        npairs[i] = 0;
        if(options->need_avg_sep) {
            ravg[i] = ZERO;
        }
        if(need_weightavg) {
            weightavg[i] = ZERO;
        }
    }
#endif

    DOUBLE rupp_sqr[nbins];
    for(int i=0; i < nbins;i++) {
        rupp_sqr[i] = rupp[i]*rupp[i];
    }

    /* const DOUBLE pimax = rmax; */
    const DOUBLE sqr_rmax=rupp_sqr[nbins-1];
    const DOUBLE sqr_rmin=rupp_sqr[0];

    int interrupted=0, abort_status = EXIT_SUCCESS;
    int64_t numdone=0;
    if(options->verbose) {
        init_my_progressbar(num_cell_pairs, &interrupted);
    }

    /*---Loop-over-Data1-particles--------------------*/
#if defined(_OPENMP)
#pragma omp parallel shared(numdone, abort_status, interrupt_status_xi_DOUBLE)
    {
        const int tid = omp_get_thread_num();
        uint64_t npairs[nbins];
        DOUBLE ravg[nbins];
        DOUBLE weightavg[nbins];
        for(int i=0;i<nbins;i++) {
            npairs[i] = 0;
            if(options->need_avg_sep) {
                ravg[i] = ZERO;
            }
            if(need_weightavg) {
                weightavg[i] = ZERO;
            }
        }

#pragma omp for schedule(dynamic) nowait
#endif
        for(int64_t icellpair=0;icellpair<num_cell_pairs;icellpair++) {

#if defined(_OPENMP)
#pragma omp flush (abort_status, interrupt_status_xi_DOUBLE)
#endif
            if(abort_status == EXIT_SUCCESS && interrupt_status_xi_DOUBLE == EXIT_SUCCESS) {

                if(options->verbose) {
#if defined(_OPENMP)
                    if (omp_get_thread_num() == 0)
#endif
                        my_progressbar(numdone,&interrupted);


#if defined(_OPENMP)
#pragma omp atomic
#endif
                    numdone++;
                } //verbose

                struct cell_pair_DOUBLE *this_cell_pair = &all_cell_pairs[icellpair];
                DOUBLE *this_rpavg = options->need_avg_sep ? ravg:NULL;
                DOUBLE *this_weightavg = need_weightavg ? weightavg:NULL;

                const int status = xi_function_DOUBLE(this_cell_pair->x1, this_cell_pair->y1, this_cell_pair->z1,
                                                      this_cell_pair->weights1, this_cell_pair->N1,
                                                      this_cell_pair->x2, this_cell_pair->y2, this_cell_pair->z2,
                                                      this_cell_pair->weights2, this_cell_pair->N2,
                                                      this_cell_pair->same_cell,
                                                      sqr_rmax, sqr_rmin, nbins, rupp_sqr,
                                                      this_cell_pair->xwrap, this_cell_pair->ywrap, this_cell_pair->zwrap,
                                                      this_cell_pair->min_dx, this_cell_pair->min_dy, this_cell_pair->min_dz,
                                                      this_cell_pair->closest_x1, this_cell_pair->closest_y1, this_cell_pair->closest_z1,
                                                      this_rpavg, npairs,
                                                      this_weightavg, extra->weight_method);

                /* This actually causes a race condition under OpenMP - but mostly
                   I care that an error occurred - rather than the exact value of
                   the error status */
                abort_status |= status;

            }//error occurred somewhere in the called functions: abort_status is set
        }//loop over cell-pairs

#if defined(_OPENMP)
        for(int j=0;j<nbins;j++) {
            all_npairs[tid][j] = npairs[j];
            if(options->need_avg_sep) {
                all_ravg[tid][j] = ravg[j];
            }
            if(need_weightavg) {
                all_weightavg[tid][j] = weightavg[j];
            }
        }
    }//close the omp parallel region
#endif//openmp parallel

    free(all_cell_pairs);
    if(options->copy_particles == 0) {
        int64_t *original_index = lattice[0].original_index;
        int status = reorder_particles_back_into_original_order_DOUBLE(ND, original_index, X, Y, Z, &(extra->weights0));
        if(status != EXIT_SUCCESS) {
            return status;
        }
    }

    free_cellarray_DOUBLE(lattice, totncells);
    if(abort_status != EXIT_SUCCESS || interrupt_status_xi_DOUBLE != EXIT_SUCCESS) {
        /* Cleanup memory here if aborting */
        free(rupp);
#if defined(_OPENMP)
        matrix_free((void **) all_npairs,numthreads);
        if(options->need_avg_sep) {
            matrix_free((void **) all_ravg, numthreads);
        }
        if(need_weightavg) {
            matrix_free((void **) all_weightavg, numthreads);
        }

#endif//OpenMP
      return EXIT_FAILURE;
    }

    if(options->verbose) {
        finish_myprogressbar(&interrupted);
    }

#if defined(_OPENMP)
    /* Note that this *NOT* in an OMP parallel region */
    uint64_t npairs[nbins];
    DOUBLE ravg[nbins];
    DOUBLE weightavg[nbins];

    for(int i=0;i<nbins;i++) {
        npairs[i] = 0;
        if(options->need_avg_sep) {
            ravg[i] = ZERO;
        }
        if(need_weightavg) {
            weightavg[i] = ZERO;
        }
    }

    for(int i=0;i<numthreads;i++) {
        for(int j=0;j<nbins;j++) {
            npairs[j] += all_npairs[i][j];
            if(options->need_avg_sep) {
                ravg[j] += all_ravg[i][j];
            }
            if(need_weightavg) {
                weightavg[j] += all_weightavg[i][j];
            }
        }
    }
    matrix_free((void **) all_npairs,numthreads);
    if(options->need_avg_sep) {
        matrix_free((void **) all_ravg, numthreads);
    }
    if(need_weightavg) {
        matrix_free((void **) all_weightavg, numthreads);
    }
#endif//OpenMP


    /* I am only doubling the pair-counts to account for the rmin=0.0
       case. Ideally, I would simply add ND/2 pairs but for odd ND, this
       would result in incorrect output. Easier to simply double all the
       pairs, and add ND to the first valid rp bin.
     */
    const uint64_t int_fac = 2;
    const DOUBLE dbl_fac = (DOUBLE) 2.0;

    for(int i=0;i<nbins;i++) {
        npairs[i] *= int_fac;
        if(options->need_avg_sep) {
            ravg[i] *= dbl_fac;
        }
        if(need_weightavg) {
            weightavg[i] *= dbl_fac;
        }
    }

    /* Is the min. requested separation 0.0 ?*/
    /* The comparison is '<=' rather than '==' only to silence
       the compiler  */
    if(rupp[0] <= 0.0) {
        /* Then, add all the self-pairs. This ensures that
           a cross-correlation with two identical datasets
           produces the same result as the auto-correlation  */
        npairs[1] += ND; //npairs[1] contains the first valid bin.

      // Increasing npairs affects rpavg and weightavg.
      // We don't need to add anything to rpavg; all the self-pairs have 0 separation!
      // The self-pairs have non-zero weight, though.  So, fix that here.
      if(need_weightavg){
        // Keep in mind this is an autocorrelation (i.e. only one particle set to consider)
        weight_func_t_DOUBLE weight_func = get_weight_func_by_method_DOUBLE(extra->weight_method);
        pair_struct_DOUBLE pair = {.num_weights = extra->weights0.num_weights,
                                   .dx.d=0., .dy.d=0., .dz.d=0.,  // always 0 separation
                                   .parx.d=0., .pary.d=0., .parz.d=0.};
        for(int64_t j = 0; j < ND; j++){
            for(int w = 0; w < pair.num_weights; w++){
                pair.weights0[w].d = ((DOUBLE *) extra->weights0.weights[w])[j];
                pair.weights1[w].d = ((DOUBLE *) extra->weights0.weights[w])[j];
            }
            weightavg[1] += weight_func(&pair);
        }
      }
    }


    //So the npairs array contains the number of pairs
    //and the ravg array contain the *SUM* of separations
    //Let's divide out ravg by npairs to actually get
    //the mean ravg
      for(int i=0;i<nbins;i++) {
        if(npairs[i] > 0) {
          if(options->need_avg_sep) {
            ravg[i] /= (DOUBLE) npairs[i] ;
          }
          if(need_weightavg) {
            weightavg[i] /= (DOUBLE) npairs[i];
          }
        }
      }

    //Pack in the results
    results->nbin = nbins;
    results->npairs = my_malloc(sizeof(*(results->npairs)), nbins);
    results->xi     = my_malloc(sizeof(*(results->xi))  , nbins);
    results->rupp   = my_malloc(sizeof(*(results->rupp))  , nbins);
    results->ravg   = my_malloc(sizeof(*(results->ravg))  , nbins);
    results->weightavg = my_calloc(sizeof(*(results->weightavg))  , nbins);
    if(results->npairs == NULL || results->rupp == NULL ||
       results->ravg == NULL || results->xi == NULL || results->weightavg == NULL) {
        free_results_xi(results);
        free(rupp);
        return EXIT_FAILURE;
    }

    DOUBLE weightsum = (DOUBLE) ND, weight_sqr_sum = (DOUBLE) ND;

    // If weights were provided and weight_method is pair_product,
    // return the weighted xi
    if(need_weightavg && extra->weight_method == PAIR_PRODUCT) {
        DOUBLE *weights = extra->weights0.weights[0];  // pair_product only uses the first weights field
        weightsum = 0.;
        for(int64_t j = 0; j < ND; j++){
            weightsum += weights[j];
            weight_sqr_sum += weights[j]*weights[j];
        }
    }

    // The RR term is the expected pair counts for a random particle set, all with the mean weight
    // The negative term is needed for autocorrelations
    const DOUBLE prefac_density=weightsum*(weightsum - weightsum/ND)/(boxsize*boxsize*boxsize);

    DOUBLE rlow = 0.0 ;
    //The first bin contains junk
    for(int i=0;i<nbins;i++) {
        results->npairs[i] = npairs[i];
        results->rupp[i]   = rupp[i];
        results->ravg[i] = ZERO;
        results->weightavg[i] = ZERO;
        if(options->need_avg_sep) {
            results->ravg[i] = ravg[i];
        }
        if(need_weightavg) {
            results->weightavg[i] = weightavg[i];
        }

        DOUBLE weight0 = (DOUBLE) results->npairs[i];
        if(need_weightavg  && extra->weight_method == PAIR_PRODUCT){
            weight0 *= results->weightavg[i];
        }
        const DOUBLE vol=4.0/3.0*M_PI*(rupp[i]*rupp[i]*rupp[i]-rlow*rlow*rlow);
        /* compute xi, dividing summed weight by that expected for a random set */
        if(vol > 0.0) {
            DOUBLE weightrandom = prefac_density*vol;
            if(rlow <= 0.){
                weightrandom += weight_sqr_sum;  // Bins that start at 0 include self-pairs
            }
            results->xi[i] = (weight0/weightrandom-1.0);
        } else {
            results->xi[i] = -2.0;//can not occur ->signals invalid
        }
        rlow=results->rupp[i];
    }

    free(rupp);

    /* reset interrupt handlers to default */
    RESET_INTERRUPT_HANDLERS();
    reset_bin_refine_factors(options);

    if(options->c_api_timer) {
        struct timeval t1;
        gettimeofday(&t1, NULL);
        options->c_api_time = ADD_DIFF_TIME(t0, t1);
    }

    return EXIT_SUCCESS;
}
