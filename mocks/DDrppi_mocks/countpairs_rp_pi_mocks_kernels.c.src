// # -*- mode: c -*-
/* File: countpairs_rp_pi_mocks_kernels.c */
/*
  This file is a part of the Corrfunc package
  Copyright (C) 2015-- Manodeep Sinha (manodeep@gmail.com)
  License: MIT LICENSE. See LICENSE file under the top-level
  directory at https://github.com/manodeep/Corrfunc/
*/


#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdint.h>
#include <inttypes.h>

#include "defs.h"
#include "function_precision.h"
#include "utils.h"

#include "weight_functions_DOUBLE.h"

#if defined(__AVX__)
#include "avx_calls.h"

static inline int countpairs_rp_pi_mocks_avx_intrinsics_DOUBLE(const int64_t N0, DOUBLE *x0, DOUBLE *y0, DOUBLE *z0, DOUBLE *d0, const weight_struct_DOUBLE *weights0,
                                                               const int64_t N1, DOUBLE *x1, DOUBLE *y1, DOUBLE *z1, DOUBLE *d1, const weight_struct_DOUBLE *weights1,
                                                               const int same_cell,
                                                               const unsigned int fast_divide_and_NR_steps,
                                                               const DOUBLE sqr_rpmax, const DOUBLE sqr_rpmin, const int nbin, const int npibin,
                                                               const DOUBLE *rupp_sqr, const DOUBLE pimax, const DOUBLE max_sep,
                                                               DOUBLE *src_rpavg,
                                                               uint64_t *src_npairs, DOUBLE *src_weightavg, const weight_method_t weight_method)
{
    if(N0 == 0 || N1 == 0) {
        return EXIT_SUCCESS;
    }

    if(src_npairs == NULL) {
        return EXIT_FAILURE;
    }

    const int32_t need_rpavg = src_rpavg != NULL;
    const int32_t need_weightavg = src_weightavg != NULL;

    const int64_t totnbins = (npibin+1)*(nbin+1);
    const DOUBLE sqr_max_sep = max_sep * max_sep;
    const DOUBLE sqr_pimax = pimax*pimax;

    AVX_FLOATS m_rupp_sqr[nbin];
    AVX_FLOATS m_kbin[nbin];
    for(int i=0;i<nbin;i++) {
        m_rupp_sqr[i] = AVX_SET_FLOAT(rupp_sqr[i]);
        m_kbin[i] = AVX_SET_FLOAT((DOUBLE) i);
    }

    uint64_t npairs[totnbins];
    const DOUBLE dpi = pimax/npibin;
    const DOUBLE inv_dpi = 1.0/dpi;
    DOUBLE rpavg[totnbins], weightavg[totnbins];
    for(int i=0;i<totnbins;i++) {
        npairs[i] = 0;
        if(need_rpavg) {
            rpavg[i] = ZERO;
        }
        if(need_weightavg){
            weightavg[i] = ZERO;
        }
    }
    
    // A copy whose pointers we can advance
    weight_struct_DOUBLE local_w0 = {.weights={NULL}, .num_weights=0}, 
                         local_w1 = {.weights={NULL}, .num_weights=0};
    pair_struct_DOUBLE pair = {.num_weights=0};
    avx_weight_func_t_DOUBLE avx_weight_func = NULL;
    weight_func_t_DOUBLE fallback_weight_func = NULL;
    if(need_weightavg){
        // Same particle list, new copy of num_weights pointers into that list
        local_w0 = *weights0;
        local_w1 = *weights1;

        pair.num_weights = local_w0.num_weights;

        avx_weight_func = get_avx_weight_func_by_method_DOUBLE(weight_method);
        fallback_weight_func = get_weight_func_by_method_DOUBLE(weight_method);
    }

    int64_t prev_j = 0, n_off = 0;
    for(int64_t i=0;i<N0;i++) {
        const DOUBLE xpos = *x0++;
        const DOUBLE ypos = *y0++;
        const DOUBLE zpos = *z0++;
        const DOUBLE dpos = *d0++;
        for(int w = 0; w < pair.num_weights; w++){
            // local_w0.weights[w] is a pointer to a float in the particle list of weights,
            // just as x0 is a pointer into the list of x-positions.
            // The advancement of the local_w0.weights[w] pointer should always mirror x0.
            pair.weights0[w].a = AVX_SET_FLOAT(*(local_w0.weights[w])++);
        }

        int64_t j;
        if(same_cell == 1) {
            d1++; n_off++;
            j = i+1;
        } else {
            for(;prev_j<N1;prev_j++) {
                const DOUBLE dz = *d1 - dpos;
                if(dz > -max_sep) break;
                d1++; n_off++;
            }
            if(prev_j == N1) {
                break;
            }
            j = prev_j;
        }
        DOUBLE *locald1 = d1;
        DOUBLE *localx1 = x1 + n_off;
        DOUBLE *localy1 = y1 + n_off;
        DOUBLE *localz1 = z1 + n_off;
        for(int w = 0; w < local_w1.num_weights; w++){
            local_w1.weights[w] = weights1->weights[w] + n_off;
        }

        AVX_FLOATS m_xpos    = AVX_SET_FLOAT(xpos);
        AVX_FLOATS m_ypos    = AVX_SET_FLOAT(ypos);
        AVX_FLOATS m_zpos    = AVX_SET_FLOAT(zpos);
        AVX_FLOATS m_dpos    = AVX_SET_FLOAT(dpos);
        union int8 {
            AVX_INTS m_ibin;
            int ibin[AVX_NVEC];
        };

        union float8{
            AVX_FLOATS m_Dperp;
            DOUBLE Dperp[AVX_NVEC];
        };

        const AVX_FLOATS m_sqr_pimax  = AVX_SET_FLOAT(sqr_pimax);
        const AVX_FLOATS m_sqr_rpmax  = AVX_SET_FLOAT(sqr_rpmax);
        const AVX_FLOATS m_sqr_max_sep = AVX_SET_FLOAT(sqr_max_sep);
        /* const AVX_FLOATS m_max_sep = AVX_SET_FLOAT(max_sep); */
        const AVX_FLOATS m_inv_dpi    = AVX_SET_FLOAT(inv_dpi);
        const AVX_FLOATS m_sqr_rpmin  = AVX_SET_FLOAT(sqr_rpmin);
        const AVX_FLOATS m_npibin     = AVX_SET_FLOAT((DOUBLE) npibin);
        const AVX_FLOATS m_zero       = AVX_SET_FLOAT(ZERO);
        const AVX_FLOATS m_one    = AVX_SET_FLOAT((DOUBLE) 1);

        for(;j<=(N1-AVX_NVEC);j+=AVX_NVEC){
            const AVX_FLOATS m_x2 = AVX_LOAD_FLOATS_UNALIGNED(localx1);
            const AVX_FLOATS m_y2 = AVX_LOAD_FLOATS_UNALIGNED(localy1);
            const AVX_FLOATS m_z2 = AVX_LOAD_FLOATS_UNALIGNED(localz1);
            const AVX_FLOATS m_d2 = AVX_LOAD_FLOATS_UNALIGNED(locald1);

            localx1 += AVX_NVEC;
            localy1 += AVX_NVEC;
            localz1 += AVX_NVEC;
            locald1 += AVX_NVEC;
            
            for(int w = 0; w < pair.num_weights; w++){
                pair.weights1[w].a = AVX_LOAD_FLOATS_UNALIGNED(local_w1.weights[w]);
                local_w1.weights[w] += AVX_NVEC;
            }
            
            union float8_weights{
                AVX_FLOATS m_weights;
                DOUBLE weights[NVEC];
            };
            union float8_weights union_mweight;
            
            const AVX_FLOATS m_perpx = AVX_SUBTRACT_FLOATS(m_xpos, m_x2);
            const AVX_FLOATS m_perpy = AVX_SUBTRACT_FLOATS(m_ypos, m_y2);
            const AVX_FLOATS m_perpz = AVX_SUBTRACT_FLOATS(m_zpos, m_z2);
            
            const AVX_FLOATS m_parx = AVX_ADD_FLOATS(m_x2, m_xpos);
            const AVX_FLOATS m_pary = AVX_ADD_FLOATS(m_y2, m_ypos);
            const AVX_FLOATS m_parz = AVX_ADD_FLOATS(m_z2, m_zpos);

            AVX_FLOATS m_sqr_Dpar, m_sqr_Dperp;
            {
                const AVX_FLOATS m_s_dot_l = AVX_SUBTRACT_FLOATS(AVX_SQUARE_FLOAT(m_d2), AVX_SQUARE_FLOAT(m_dpos));
                
                /* const AVX_FLOATS m_dz_mask = AVX_COMPARE_FLOATS(m_perpz, m_max_sep, _CMP_LT_OQ); */
                /* if(AVX_TEST_COMPARISON(m_dz_mask) == 0) { */
                /*     j = N1; */
                /*     break; */
                /* } */

                const AVX_FLOATS m_sqr_s_dot_l = AVX_SQUARE_FLOAT(m_s_dot_l);
                const AVX_FLOATS m_sqr_perpx = AVX_SQUARE_FLOAT(m_perpx);
                const AVX_FLOATS m_sqr_perpy = AVX_SQUARE_FLOAT(m_perpy);
                const AVX_FLOATS m_sqr_perpz = AVX_SQUARE_FLOAT(m_perpz);
                const AVX_FLOATS m_sqr_sep = AVX_ADD_FLOATS(m_sqr_perpx, AVX_ADD_FLOATS(m_sqr_perpy, m_sqr_perpz));//3-d separation
                
                //The 3-d separation (| s.s |)^2 *must* be less than (pimax^2 + rpmax^2). If not, one of the
                //constraints for counting the pair (i.e., rp < rpmax, \pi < pimax) must be violated and
                //we would discard the pair.
                const AVX_FLOATS m_mask_3d_sep = AVX_COMPARE_FLOATS(m_sqr_sep, m_sqr_max_sep, _CMP_LT_OQ);
                const AVX_FLOATS m_sqr_norm_l = AVX_ADD_FLOATS(AVX_SQUARE_FLOAT(m_parx), AVX_ADD_FLOATS(AVX_SQUARE_FLOAT(m_pary), AVX_SQUARE_FLOAT(m_parz)));

                //\pi ^2 = |s.l| ^2 / |l|^2
                //However, division is slow -> so we will check if \pimax^2 * |l| ^2 < |s.l|^2. If not, then the
                //value of \pi (after division) *must* be larger than \pimax -> in which case we would
                //not count that pair anway.
                const AVX_FLOATS m_sqr_pimax_times_sqr_l = AVX_MULTIPLY_FLOATS(m_sqr_pimax, m_sqr_norm_l);
                const AVX_FLOATS m_mask_pimax_sep = AVX_COMPARE_FLOATS(m_sqr_s_dot_l, m_sqr_pimax_times_sqr_l, _CMP_LT_OQ);// is pi < pimax ?

#if 0
                /* This could have been an additional check before the divide but does not seem to boost performance */
                const AVX_FLOATS m_sqr_rpmax_times_sqr_l = AVX_MULTIPLY_FLOATS(m_sqr_rpmax, m_sqr_norm_l);
                const AVX_FLOATS m_sqr_s_minus_sqr_sdotl = AVX_SUBTRACT_FLOATS(m_sqr_sep, m_sqr_s_dot_l);
                const AVX_FLOATS m_sqr_rpmax_initial_mask = AVX_COMPARE_FLOATS(m_sqr_s_minus_sqr_sdotl, m_sqr_rpmax_times_sqr_l, _CMP_LT_OQ);/* is rp < rpmax */
                
                //If the bits are all 0, then *none* of the pairs satisfy the pimax + rpmax constraints.
                const AVX_FLOATS m_mask = AVX_BITWISE_AND(AVX_BITWISE_AND(m_mask_3d_sep, m_mask_pimax_sep), m_sqr_rpmax_initial_mask);
#else
                const AVX_FLOATS m_mask = AVX_BITWISE_AND(m_mask_3d_sep, m_mask_pimax_sep);
#endif

                if(AVX_TEST_COMPARISON(m_mask)==0) {
                    continue;
                }


                /* Check if fast_divide is enabled and either use the normal divide or
                   use the approx. reciprocal followed by `fast_divide_and_NR_steps` number
                   of Newton-Raphson steps to improve numerical accuracy.

                   macro is defined in `avx_calls.h`
                 */
                CHECK_AND_FAST_DIVIDE(m_sqr_Dpar, m_sqr_s_dot_l, m_sqr_norm_l, fast_divide_and_NR_steps);
                
                m_sqr_Dperp = AVX_SUBTRACT_FLOATS(m_sqr_sep,m_sqr_Dpar);
            }


            AVX_FLOATS m_mask_left;
            //Do the mask filters in a separate scope
            {
                const AVX_FLOATS m_mask_pimax = AVX_COMPARE_FLOATS(m_sqr_Dpar,m_sqr_pimax,_CMP_LT_OQ);
                if(AVX_TEST_COMPARISON(m_mask_pimax)==0) {
                    continue;
                }
                const AVX_FLOATS m_rpmax_mask = AVX_COMPARE_FLOATS(m_sqr_Dperp, m_sqr_rpmax, _CMP_LT_OQ);
                const AVX_FLOATS m_rpmin_mask = AVX_COMPARE_FLOATS(m_sqr_Dperp, m_sqr_rpmin, _CMP_GE_OQ);
                const AVX_FLOATS m_rp_mask = AVX_BITWISE_AND(m_rpmax_mask,m_rpmin_mask);

                m_mask_left = AVX_BITWISE_AND(m_mask_pimax, m_rp_mask);
                if(AVX_TEST_COMPARISON(m_mask_left)==0) {
                    continue;
                }

                m_sqr_Dperp = AVX_BLEND_FLOATS_WITH_MASK(m_zero,m_sqr_Dperp,m_mask_left);
                m_sqr_Dpar  = AVX_BLEND_FLOATS_WITH_MASK(m_sqr_pimax,m_sqr_Dpar,m_mask_left);
            }
            const AVX_FLOATS m_Dpar = AVX_SQRT_FLOAT(m_sqr_Dpar);

            union float8 union_mDperp;
            if(need_rpavg) {
                union_mDperp.m_Dperp = AVX_SQRT_FLOAT(m_sqr_Dperp);
            }
            if(need_weightavg){
                pair.dx.a = m_perpx;
                pair.dy.a = m_perpy;
                pair.dz.a = m_perpz;
                
                pair.parx.a = m_parx;
                pair.pary.a = m_pary;
                pair.parz.a = m_parz;

                union_mweight.m_weights = avx_weight_func(&pair);
            }

            const AVX_FLOATS m_mask = m_mask_left;
            AVX_FLOATS m_rpbin = AVX_SET_FLOAT((DOUBLE) 0);
            for(int kbin=nbin-1;kbin>=1;kbin--) {
                const AVX_FLOATS m_mask_low = AVX_COMPARE_FLOATS(m_sqr_Dperp,m_rupp_sqr[kbin-1],_CMP_GE_OQ);
                const AVX_FLOATS m_bin_mask = AVX_BITWISE_AND(m_mask_low,m_mask_left);
                m_rpbin = AVX_BLEND_FLOATS_WITH_MASK(m_rpbin,m_kbin[kbin], m_bin_mask);
                m_mask_left = AVX_COMPARE_FLOATS(m_sqr_Dperp, m_rupp_sqr[kbin-1],_CMP_LT_OQ);
                if(AVX_TEST_COMPARISON(m_mask_left) == 0) {
                    break;
                }
            }

            /* Compute the 1-D index to the [rpbin, pibin] := rpbin*(npibin+1) + pibin */
            /*                      const AVX_FLOATS m_Dpar = AVX_SQRT_FLOAT(m_sqr_Dpar); */
            const AVX_FLOATS m_tmp2 = AVX_MULTIPLY_FLOATS(m_Dpar,m_inv_dpi);
            const AVX_FLOATS m_pibin = AVX_BLEND_FLOATS_WITH_MASK(m_npibin, m_tmp2, m_mask);
            const AVX_FLOATS m_npibin_p1 = AVX_ADD_FLOATS(m_npibin,m_one);
            const AVX_FLOATS m_binproduct = AVX_ADD_FLOATS(AVX_MULTIPLY_FLOATS(m_rpbin,m_npibin_p1),m_pibin);
            union int8 union_finalbin;
            union_finalbin.m_ibin = AVX_TRUNCATE_FLOAT_TO_INT(m_binproduct);

#if  __INTEL_COMPILER
#pragma unroll(AVX_NVEC)
#endif
            for(int jj=0;jj<AVX_NVEC;jj++) {
                const int ibin=union_finalbin.ibin[jj];

                npairs[ibin]++;
                if(need_rpavg) {
                    rpavg[ibin] += union_mDperp.Dperp[jj];
                }
                if(need_weightavg){
                    const DOUBLE weight = union_mweight.weights[jj];
                    weightavg[ibin] += weight;
                }
                /* fprintf(stderr,"i=%d j=%d union_rpbin.ibin[jj] = %d union_pibin.ibin[jj] = %d\n",i,j,union_rpbin.ibin[jj],union_pibin.ibin[jj]); */
            }
        }//AVX j loop

        //Take care of the remainder
        for(;j<N1;j++) {
            const DOUBLE parx = xpos + *localx1;
            const DOUBLE pary = ypos + *localy1;
            const DOUBLE parz = zpos + *localz1;

            const DOUBLE perpx = xpos - *localx1;
            const DOUBLE perpy = ypos - *localy1;
            const DOUBLE perpz = zpos - *localz1;
            const DOUBLE dot_product = dpos*dpos - (*locald1) * (*locald1);//parx*perpx + pary*perpy + parz*perpz == (x1^2 + y1^2 + z1^2) - (x2^2 + y2^2 + z2^2) == d1^2 - d2^2
            /* if(dot_product * dot_product >= sqr_max_sep) { */
            /*     break; */
            /* }  */
            localx1++;localy1++;localz1++;locald1++;
            
            for(int w = 0; w < pair.num_weights; w++){
                pair.weights1[w].d = *local_w1.weights[w]++;
            }

            const DOUBLE sqr_s = perpx*perpx + perpy*perpy + perpz*perpz;
            if(sqr_s >= sqr_max_sep) continue;

            /* const DOUBLE dot_product = (parx*perpx+pary*perpy+parz*perpz); */
            const DOUBLE norm = (parx*parx+pary*pary+parz*parz);
            const DOUBLE tmp = dot_product * dot_product;
            if(tmp >= norm*sqr_pimax) continue;
            const DOUBLE sqr_Dpar = tmp/norm;
            const int pibin  = (sqr_Dpar >= sqr_pimax) ? npibin:(int) (SQRT(sqr_Dpar)*inv_dpi);
            const DOUBLE sqr_Dperp  = sqr_s - sqr_Dpar;
            if(sqr_Dperp >= sqr_rpmax || sqr_Dperp < sqr_rpmin) continue;
            DOUBLE rp, pairweight;
            if(need_rpavg) {
                rp = SQRT(sqr_Dperp);
            }
            if(need_weightavg){
                pair.dx.d = perpx;
                pair.dy.d = perpy;
                pair.dz.d = perpz;
                
                pair.parx.d = parx;
                pair.pary.d = pary;
                pair.parz.d = parz;

                pairweight = fallback_weight_func(&pair); 
           }

            for(int kbin=nbin-1;kbin>=1;kbin--) {
                if(sqr_Dperp >= rupp_sqr[kbin-1]) {
                    const int ibin = kbin*(npibin+1) + pibin;
                    npairs[ibin]++;
                    if(need_rpavg) {
                        rpavg[ibin]+=rp;
                    }
                    if(need_weightavg){
                        weightavg[ibin] += pairweight;
                    }
                    break;
                }
            }
        }//remainder jloop
    }//i-loop

    for(int i=0;i<totnbins;i++) {
        src_npairs[i] += npairs[i];
        if(need_rpavg) {
            src_rpavg[i] += rpavg[i];
        }
        if(need_weightavg) {
            src_weightavg[i] += weightavg[i];
        }
    }
    return EXIT_SUCCESS;
}
#endif //AVX defined




#if defined(__SSE4_2__)
#include "sse_calls.h"

static inline int countpairs_rp_pi_mocks_sse_intrinsics_DOUBLE(const int64_t N0, DOUBLE *x0, DOUBLE *y0, DOUBLE *z0, DOUBLE *d0, const weight_struct_DOUBLE *weights0,
                                                               const int64_t N1, DOUBLE *x1, DOUBLE *y1, DOUBLE *z1, DOUBLE *d1, const weight_struct_DOUBLE *weights1,
                                                               const int same_cell,
                                                               const unsigned int fast_divide_and_NR_steps,
                                                               const DOUBLE sqr_rpmax, const DOUBLE sqr_rpmin, const int nbin, const int npibin,
                                                               const DOUBLE *rupp_sqr, const DOUBLE pimax, const DOUBLE max_sep,
                                                               DOUBLE *src_rpavg,
                                                               uint64_t *src_npairs,
                                                               DOUBLE *src_weightavg, const weight_method_t weight_method)
{
    if(N0 == 0 || N1 == 0) {
        return EXIT_SUCCESS;
    }
    if(src_npairs == NULL) {
        return EXIT_FAILURE;
    }

    const int32_t need_rpavg = src_rpavg != NULL;
    const int32_t need_weightavg = src_weightavg != NULL;
    (void) fast_divide_and_NR_steps; //unused

    SSE_FLOATS m_rupp_sqr[nbin];
    for(int i=0;i<nbin;i++) {
        m_rupp_sqr[i] = SSE_SET_FLOAT(rupp_sqr[i]);
    }
    SSE_FLOATS m_kbin[nbin];
    for(int i=0;i<nbin;i++) {
        m_kbin[i] = SSE_SET_FLOAT((DOUBLE) i);
    }

    const int64_t totnbins = (npibin+1)*(nbin+1);
    const DOUBLE sqr_max_sep = sqr_rpmax + pimax*pimax;
    const DOUBLE sqr_pimax = pimax*pimax;

    uint64_t npairs[totnbins];
    const DOUBLE dpi = pimax/npibin;
    const DOUBLE inv_dpi = 1.0/dpi;
    DOUBLE rpavg[totnbins], weightavg[totnbins];
    for(int64_t i=0;i<totnbins;i++) {
        npairs[i] = 0;
        if (need_rpavg) {
            rpavg[i] = ZERO;
        }
        if(need_weightavg){
            weightavg[i] = ZERO;
        }
    }
    
    // A copy whose pointers we can advance
    weight_struct_DOUBLE local_w0 = {.weights={NULL}, .num_weights=0}, 
                         local_w1 = {.weights={NULL}, .num_weights=0};
    pair_struct_DOUBLE pair = {.num_weights=0};
    sse_weight_func_t_DOUBLE sse_weight_func = NULL;
    weight_func_t_DOUBLE fallback_weight_func = NULL;
    if(need_weightavg){
      // Same particle list, new copy of num_weights pointers into that list
      local_w0 = *weights0;
      local_w1 = *weights1;
      
      pair.num_weights = local_w0.num_weights;
      
      sse_weight_func = get_sse_weight_func_by_method_DOUBLE(weight_method);
      fallback_weight_func = get_weight_func_by_method_DOUBLE(weight_method);
    }

    int64_t prev_j=0, n_off = 0;
    for(int64_t i=0;i<N0;i++) {
        const DOUBLE xpos = *x0++;
        const DOUBLE ypos = *y0++;
        const DOUBLE zpos = *z0++;
        const DOUBLE dpos = *d0++;
        for(int w = 0; w < pair.num_weights; w++){
            // local_w0.weights[w] is a pointer to a float in the particle list of weights,
            // just as x0 is a pointer into the list of x-positions.
            // The advancement of the local_w0.weights[w] pointer should always mirror x0.
            pair.weights0[w].s = SSE_SET_FLOAT(*local_w0.weights[w]++);
        }

        int64_t j;
        if(same_cell == 1) {
            d1++; n_off++;
            j = i+1;
        } else {
            for(;prev_j<N1;prev_j++) {
                const DOUBLE dz = *d1 - dpos;
                if(dz > -max_sep) break;
                d1++; n_off++;
            }
            if(prev_j == N1) {
                break;
            }
            j = prev_j;
        }
        DOUBLE *locald1 = d1;
        DOUBLE *localx1 = x1 + n_off;
        DOUBLE *localy1 = y1 + n_off;
        DOUBLE *localz1 = z1 + n_off;
        for(int w = 0; w < local_w1.num_weights; w++){
            local_w1.weights[w] = weights1->weights[w] + n_off;
        }
        
        const SSE_FLOATS m_xpos    = SSE_SET_FLOAT(xpos);
        const SSE_FLOATS m_ypos    = SSE_SET_FLOAT(ypos);
        const SSE_FLOATS m_zpos    = SSE_SET_FLOAT(zpos);
        const SSE_FLOATS m_dpos    = SSE_SET_FLOAT(dpos);

        union int8 {
            SSE_INTS m_ibin;
            int ibin[SSE_NVEC];
        };


        union float8{
            SSE_FLOATS m_Dperp;
            DOUBLE Dperp[SSE_NVEC];
        };

        const SSE_FLOATS m_sqr_pimax  = SSE_SET_FLOAT(sqr_pimax);
        const SSE_FLOATS m_sqr_rpmax  = SSE_SET_FLOAT(sqr_rpmax);
        const SSE_FLOATS m_sqr_max_sep = SSE_SET_FLOAT(sqr_max_sep);
        const SSE_FLOATS m_inv_dpi    = SSE_SET_FLOAT(inv_dpi);
        const SSE_FLOATS m_sqr_rpmin  = SSE_SET_FLOAT(sqr_rpmin);
        const SSE_FLOATS m_npibin     = SSE_SET_FLOAT((DOUBLE) npibin);
        const SSE_FLOATS m_zero       = SSE_SET_FLOAT(ZERO);
        const SSE_FLOATS m_one    = SSE_SET_FLOAT((DOUBLE) 1);

        for(;j<=(N1-SSE_NVEC);j+=SSE_NVEC){
            const SSE_FLOATS m_x2 = SSE_LOAD_FLOATS_UNALIGNED(localx1);
            const SSE_FLOATS m_y2 = SSE_LOAD_FLOATS_UNALIGNED(localy1);
            const SSE_FLOATS m_z2 = SSE_LOAD_FLOATS_UNALIGNED(localz1);
            const SSE_FLOATS m_d2 = SSE_LOAD_FLOATS_UNALIGNED(locald1);

            localx1 += SSE_NVEC;
            localy1 += SSE_NVEC;
            localz1 += SSE_NVEC;
            locald1 += SSE_NVEC;
            
            for(int w = 0; w < pair.num_weights; w++){
                pair.weights1[w].s = SSE_LOAD_FLOATS_UNALIGNED(local_w1.weights[w]);
                local_w1.weights[w] += SSE_NVEC;
            }

            union float4_weights{
                SSE_FLOATS m_weights;
                DOUBLE weights[SSE_NVEC];
            };
            union float4_weights union_mweight;

            const SSE_FLOATS m_perpx = SSE_SUBTRACT_FLOATS(m_xpos, m_x2);
            const SSE_FLOATS m_perpy = SSE_SUBTRACT_FLOATS(m_ypos, m_y2);
            const SSE_FLOATS m_perpz = SSE_SUBTRACT_FLOATS(m_zpos, m_z2);
            
            const SSE_FLOATS m_parx = SSE_ADD_FLOATS(m_x2, m_xpos);
            const SSE_FLOATS m_pary = SSE_ADD_FLOATS(m_y2, m_ypos);
            const SSE_FLOATS m_parz = SSE_ADD_FLOATS(m_z2, m_zpos);
            
            SSE_FLOATS m_sqr_Dpar, m_sqr_Dperp;
            {
                const SSE_FLOATS m_dsep =  SSE_SUBTRACT_FLOATS(SSE_SQUARE_FLOAT(m_d2), SSE_SQUARE_FLOAT(m_dpos));
                /* const SSE_FLOATS m_dsep_mask = SSE_COMPARE_FLOATS_LT(m_dsep, m_sqr_max_sep); */
                /* if(SSE_TEST_COMPARISON(m_dsep_mask) == 0) { */
                /*     j = N1; */
                /*     break; */
                /* } */

                /* const SSE_FLOATS m_term1 = SSE_MULTIPLY_FLOATS(m_parx, m_perpx); */
                /* const SSE_FLOATS m_term2 = SSE_MULTIPLY_FLOATS(m_pary, m_perpy); */
                /* const SSE_FLOATS m_term3 = SSE_MULTIPLY_FLOATS(m_parz, m_perpz); */
                const SSE_FLOATS m_sqr_s_dot_l = SSE_SQUARE_FLOAT(m_dsep);

                const SSE_FLOATS m_sqr_perpx = SSE_SQUARE_FLOAT(m_perpx);
                const SSE_FLOATS m_sqr_perpy = SSE_SQUARE_FLOAT(m_perpy);
                const SSE_FLOATS m_sqr_perpz = SSE_SQUARE_FLOAT(m_perpz);
                const SSE_FLOATS m_sqr_sep = SSE_ADD_FLOATS(m_sqr_perpx, SSE_ADD_FLOATS(m_sqr_perpy, m_sqr_perpz));//3-d separation
                //The 3-d separation (| s.s |)^2 *must* be less than (pimax^2 + rpmax^2). If not, one of the
                //constraints for counting the pair (i.e., rp < rpmax, \pi < pimax) must be violated and
                //we would discard the pair.
                const SSE_FLOATS m_mask_3d_sep = SSE_COMPARE_FLOATS_LT(m_sqr_sep, m_sqr_max_sep);

                const SSE_FLOATS m_sqr_norm_l = SSE_ADD_FLOATS(SSE_SQUARE_FLOAT(m_parx), SSE_ADD_FLOATS(SSE_SQUARE_FLOAT(m_pary), SSE_SQUARE_FLOAT(m_parz)));

                //\pi ^2 = |s.l| ^2 / |l|^2
                //However, division is slow -> so we will check if \pimax^2 * |l| ^2 < |s.l|^2. If not, then the
                //value of \pi (after division) *must* be larger than \pimax -> in which case we would
                //not count that pair anway.
                const SSE_FLOATS m_sqr_pimax_times_l = SSE_MULTIPLY_FLOATS(m_sqr_pimax, m_sqr_norm_l);
                const SSE_FLOATS m_mask_pimax_sep = SSE_COMPARE_FLOATS_LT(m_sqr_s_dot_l, m_sqr_pimax_times_l);// is pi < pimax ?
                //If the bits are all 0, then *none* of the pairs satisfy the pimax + rpmax constraints.
                const SSE_FLOATS m_mask = SSE_BITWISE_AND(m_mask_3d_sep, m_mask_pimax_sep);
                if(SSE_TEST_COMPARISON(m_mask)==0) {
                    continue;
                }

                m_sqr_Dpar = SSE_DIVIDE_FLOATS(m_sqr_s_dot_l,m_sqr_norm_l);
                //The divide is the actual operation we need
                // but divides are about 10x slower than multiplies.
                m_sqr_Dperp = SSE_SUBTRACT_FLOATS(m_sqr_sep,m_sqr_Dpar);
            }


            const SSE_FLOATS m_Dpar = SSE_SQRT_FLOAT(m_sqr_Dpar);

            SSE_FLOATS m_mask_left;
            //Do the mask filters in a separate scope
            {
                const SSE_FLOATS m_mask_pimax = SSE_COMPARE_FLOATS_LT(m_sqr_Dpar,m_sqr_pimax);
                const SSE_FLOATS m_rpmax_mask = SSE_COMPARE_FLOATS_LT(m_sqr_Dperp, m_sqr_rpmax);
                const SSE_FLOATS m_rpmin_mask = SSE_COMPARE_FLOATS_GE(m_sqr_Dperp, m_sqr_rpmin);
                const SSE_FLOATS m_rp_mask = SSE_BITWISE_AND(m_rpmax_mask,m_rpmin_mask);

                m_mask_left = SSE_BITWISE_AND(m_mask_pimax, m_rp_mask);
                if(SSE_TEST_COMPARISON(m_mask_left)==0) {
                    continue;
                }

                m_sqr_Dperp = SSE_BLEND_FLOATS_WITH_MASK(m_zero,m_sqr_Dperp,m_mask_left);
                m_sqr_Dpar  = SSE_BLEND_FLOATS_WITH_MASK(m_sqr_pimax,m_sqr_Dpar,m_mask_left);
            }
            union float8 union_mDperp;
            if(need_rpavg) {
                union_mDperp.m_Dperp = SSE_SQRT_FLOAT(m_sqr_Dperp);
            }
            if(need_weightavg){
                pair.dx.s = m_perpx;
                pair.dy.s = m_perpy;
                pair.dz.s = m_perpz;
                
                pair.parx.s = m_parx;
                pair.pary.s = m_pary;
                pair.parz.s = m_parz;
                
                union_mweight.m_weights = sse_weight_func(&pair);
            }

            const SSE_FLOATS m_mask = m_mask_left;
            SSE_FLOATS m_rpbin = SSE_SET_FLOAT((DOUBLE) 0);
            for(int kbin=nbin-1;kbin>=1;kbin--) {
                const SSE_FLOATS m_mask_low = SSE_COMPARE_FLOATS_GE(m_sqr_Dperp,m_rupp_sqr[kbin-1]);
                const SSE_FLOATS m_bin_mask = SSE_BITWISE_AND(m_mask_low,m_mask_left);
                m_rpbin = SSE_BLEND_FLOATS_WITH_MASK(m_rpbin,m_kbin[kbin], m_bin_mask);
                m_mask_left = SSE_COMPARE_FLOATS_LT(m_sqr_Dperp, m_rupp_sqr[kbin-1]);
                if(SSE_TEST_COMPARISON(m_mask_left) == 0) {
                    break;
                }
            }

            /* Compute the 1-D index to the [rpbin, pibin] := rpbin*(npibin+1) + pibin */
            /*                      const SSE_FLOATS m_Dpar = SSE_SQRT_FLOAT(m_sqr_Dpar); */
            const SSE_FLOATS m_tmp2 = SSE_MULTIPLY_FLOATS(m_Dpar,m_inv_dpi);
            const SSE_FLOATS m_pibin = SSE_BLEND_FLOATS_WITH_MASK(m_npibin, m_tmp2, m_mask);
            const SSE_FLOATS m_npibin_p1 = SSE_ADD_FLOATS(m_npibin,m_one);
            const SSE_FLOATS m_binproduct = SSE_ADD_FLOATS(SSE_MULTIPLY_FLOATS(m_rpbin,m_npibin_p1),m_pibin);
            union int8 union_finalbin;
            union_finalbin.m_ibin = SSE_TRUNCATE_FLOAT_TO_INT(m_binproduct);

#if  __INTEL_COMPILER
#pragma unroll(SSE_NVEC)
#endif
            for(int jj=0;jj<SSE_NVEC;jj++) {
                const int ibin=union_finalbin.ibin[jj];

                npairs[ibin]++;
                if(need_rpavg) {
                    rpavg[ibin] += union_mDperp.Dperp[jj];
                }
                if(need_weightavg){
                    const DOUBLE weight = union_mweight.weights[jj];
                    weightavg[ibin] += weight;
                }
                /* fprintf(stderr,"i=%d j=%d union_rpbin.ibin[jj] = %d union_pibin.ibin[jj] = %d\n",i,j,union_rpbin.ibin[jj],union_pibin.ibin[jj]); */
            }
        }//SSE j loop

        //Take care of the remainder
        for(;j<N1;j++) {
            const DOUBLE parx = xpos + *localx1;
            const DOUBLE pary = ypos + *localy1;
            const DOUBLE parz = zpos + *localz1;

            const DOUBLE perpx = xpos - *localx1;
            const DOUBLE perpy = ypos - *localy1;
            const DOUBLE perpz = zpos - *localz1;
            const DOUBLE dot_product = dpos*dpos - (*locald1) * (*locald1);//parx*perpx + pary*perpy + parz*perpz == (x1^2 + y1^2 + z1^2) - (x2^2 + y2^2 + z2^2) == d1^2 - d2^2
            /* if(dot_product * dot_product >= sqr_max_sep) { */
            /*     break; */
            /* }  */
            localx1++;localy1++;localz1++;locald1++;
            
            for(int w = 0; w < pair.num_weights; w++){
                pair.weights1[w].d = *local_w1.weights[w]++;
            }

            const DOUBLE sqr_s = perpx*perpx + perpy*perpy + perpz*perpz;
            if(sqr_s >= sqr_max_sep) continue;

            const DOUBLE norm = (parx*parx + pary*pary + parz*parz);
            const DOUBLE tmp = dot_product * dot_product;
            if(tmp >= sqr_pimax * norm) continue;
            const DOUBLE sqr_Dpar = (dot_product * dot_product)/norm;


            const int pibin  = (sqr_Dpar >= sqr_pimax) ? npibin:(int) (SQRT(sqr_Dpar)*inv_dpi);
            const DOUBLE sqr_Dperp  = sqr_s - sqr_Dpar;
            if(sqr_Dperp >= sqr_rpmax || sqr_Dperp < sqr_rpmin) continue;
            DOUBLE rp, pairweight;
            if(need_rpavg) {
                rp = SQRT(sqr_Dperp);
            }
            if(need_weightavg){
                pair.dx.d = perpx;
                pair.dy.d = perpy;
                pair.dz.d = perpz;

                pair.parx.d = parx;
                pair.pary.d = pary;
                pair.parz.d = parz;

                pairweight = fallback_weight_func(&pair);
            }

            for(int kbin=nbin-1;kbin>=1;kbin--) {
                if(sqr_Dperp >= rupp_sqr[kbin-1]) {
                    const int ibin = kbin*(npibin+1) + pibin;
                    npairs[ibin]++;
                    if(need_rpavg){
                        rpavg[ibin]+=rp;
                    }
                    if(need_weightavg){
                        weightavg[ibin] += pairweight;
                    }
                    break;
                }
            }
        }//remainder jloop
    }//i-loop

    for(int i=0;i<totnbins;i++) {
        src_npairs[i] += npairs[i];
        if(need_rpavg) {
            src_rpavg[i] += rpavg[i];
        }
        if(need_weightavg) {
            src_weightavg[i] += weightavg[i];
        }
    }

    return EXIT_SUCCESS;
}
#endif //SSE4.2 defined


static inline int countpairs_rp_pi_mocks_fallback_DOUBLE(const int64_t N0, DOUBLE *x0, DOUBLE *y0, DOUBLE *z0, DOUBLE *d0, const weight_struct_DOUBLE *weights0,
                                                         const int64_t N1, DOUBLE *x1, DOUBLE *y1, DOUBLE *z1, DOUBLE *d1, const weight_struct_DOUBLE *weights1,
                                                         const int same_cell,
                                                         const unsigned int fast_divide_and_NR_steps,
                                                         const DOUBLE sqr_rpmax, const DOUBLE sqr_rpmin, const int nbin,
                                                         const int npibin, const DOUBLE *rupp_sqr, const DOUBLE pimax, const DOUBLE max_sep,
                                                         DOUBLE *src_rpavg, uint64_t *src_npairs,
                                                         DOUBLE *src_weightavg, const weight_method_t weight_method)
{
    if(N0 == 0 || N1 == 0) {
        return EXIT_SUCCESS;
    }

    if(src_npairs == NULL) {
        return EXIT_FAILURE;
    }

    const int32_t need_rpavg = src_rpavg != NULL;
    const int32_t need_weightavg = src_weightavg != NULL;

    (void) fast_divide_and_NR_steps;//unused parameter but required to keep the same function signature amongst the kernels
    
    /*----------------- FALLBACK CODE --------------------*/
    const int64_t totnbins = (npibin+1)*(nbin+1);
    const DOUBLE sqr_max_sep = max_sep * max_sep;
    const DOUBLE sqr_pimax = pimax*pimax;

    uint64_t npairs[totnbins];
    DOUBLE rpavg[totnbins], weightavg[totnbins];
    for(int i=0;i<totnbins;i++) {
        npairs[i] = 0;
        if(need_rpavg) {
            rpavg[i]=ZERO;
        }
        if(need_weightavg){
            weightavg[i]=ZERO;
        }
    }

    // A copy whose pointers we can advance
    weight_struct_DOUBLE local_w0 = {.weights={NULL}, .num_weights=0}, 
                         local_w1 = {.weights={NULL}, .num_weights=0};
    pair_struct_DOUBLE pair = {.num_weights=0};
    weight_func_t_DOUBLE weight_func = NULL;
    if(need_weightavg){
        // Same particle list, new copy of num_weights pointers into that list
        local_w0 = *weights0;
        local_w1 = *weights1;

        pair.num_weights = local_w0.num_weights;

        weight_func = get_weight_func_by_method_DOUBLE(weight_method);
    }

    const DOUBLE dpi = pimax/npibin;
    const DOUBLE inv_dpi = 1.0/dpi;
    int64_t nleft=N1, n_off = 0;
    for(int64_t i=0;i<N0;i++) {
        const DOUBLE xpos = *x0++;
        const DOUBLE ypos = *y0++;
        const DOUBLE zpos = *z0++;
        const DOUBLE dpos = *d0++;//d is the co-moving distance
        for(int w = 0; w < pair.num_weights; w++){
            pair.weights0[w].d = *local_w0.weights[w]++;
        }

        /* If in the same cell, unique pairs are guaranteed by not including the current particle */
        if(same_cell == 1) {
            d1++; n_off++;
            nleft--;
        } else {
            /* For a different cell, all pairs are unique pairs, since two cells are only opened for pairs once (accounted for in the assign_ngb_cells function)*/
            while(nleft > 0) {
                /*Particles are sorted on 'd', in increasing order */
                const DOUBLE dz = *d1 - dpos;
                if(dz > -max_sep) break;
                d1++; n_off++;
                nleft--;
            }
            /*If no particle in the second cell satisfies distance constraints on 'dz' for the current 'i'th particle in first cell, 
              then there can be no more pairs from any particles in the first cell (since the first cell is also sorted in increasing order in 'd')
             */
            if(nleft == 0) {
                i=N0;
                break;
            }
        }

        DOUBLE *localx1 = x1 + n_off;
        DOUBLE *localy1 = y1 + n_off;
        DOUBLE *localz1 = z1 + n_off;
        DOUBLE *locald1 = d1;
        for(int w = 0; w < pair.num_weights; w++){
            local_w1.weights[w] = weights1->weights[w] + n_off;
        }

        for(int64_t j=0;j<nleft;j++){
            const DOUBLE parx = xpos + *localx1;
            const DOUBLE pary = ypos + *localy1;
            const DOUBLE parz = zpos + *localz1;

            const DOUBLE perpx = xpos - *localx1;
            const DOUBLE perpy = ypos - *localy1;
            const DOUBLE perpz = zpos - *localz1;
            const DOUBLE dot_product = dpos*dpos - (*locald1) * (*locald1);//parx*perpx + pary*perpy + parz*perpz == (x1^2 + y1^2 + z1^2) - (x2^2 + y2^2 + z2^2) == d1^2 - d2^2
            localx1++;localy1++;localz1++;locald1++;
            
            for(int w = 0; w < pair.num_weights; w++){
                pair.weights1[w].d = *local_w1.weights[w]++;
            }

            const DOUBLE sqr_s = perpx*perpx + perpy*perpy + perpz*perpz;
            if(sqr_s >= sqr_max_sep) {
                continue;
            }

            /* const DOUBLE dot_product  = (parx*perpx+pary*perpy+parz*perpz);//this is simply d1^2 - d2^2 */
            const DOUBLE norm = (parx*parx+pary*pary+parz*parz);
            const DOUBLE tmp = dot_product * dot_product;
            //Checking for sqr_Dpar >= sqr_pimax before actually dividing.
            if(tmp >= norm*sqr_pimax) continue;

            //Okay need to divide then !
            const DOUBLE sqr_Dpar = tmp/norm;
            const int pibin  = (sqr_Dpar >= sqr_pimax) ? npibin:(int) (SQRT(sqr_Dpar)*inv_dpi);
            const DOUBLE sqr_Dperp  = sqr_s - sqr_Dpar;
            if(sqr_Dperp >= sqr_rpmax || sqr_Dperp < sqr_rpmin) continue;
            
            DOUBLE rp, pairweight;
            if(need_rpavg) {
                rp = SQRT(sqr_Dperp);
            }
            if(need_weightavg){
                pair.dx.d = perpx;
                pair.dy.d = perpy;
                pair.dz.d = perpz;
                
                pair.parx.d = parx;
                pair.pary.d = pary;
                pair.parz.d = parz;
                
                pairweight = weight_func(&pair);
            }

            for(int kbin=nbin-1;kbin>=1;kbin--) {
                if(sqr_Dperp >= rupp_sqr[kbin-1]) {
                    const int ibin = kbin*(npibin+1) + pibin;
                    npairs[ibin]++;
                    if(need_rpavg) {
                        rpavg[ibin]+=rp;
                    }
                    if(need_weightavg){
                        weightavg[ibin] += pairweight;
                    }
                    break;
                }
            }//finding kbin
        }//j loop over second set of particles
    }//i loop over first set of particles

    for(int i=0;i<totnbins;i++) {
        src_npairs[i] += npairs[i];
        if(need_rpavg) {
            src_rpavg[i] += rpavg[i];
        }
        if(need_weightavg){
            src_weightavg[i] += weightavg[i];
        }
    }

    return EXIT_SUCCESS;
}//end of fallback code



